<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2013-02-09 22:26"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>XPlayer</title>
	<link>http://xplayer.wordpress.com</link>
	<description>my daily efforts to be a better developer, and keep improving every day</description>
	<pubDate>Sat, 09 Feb 2013 22:26:51 +0000</pubDate>
	<language>it</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://xplayer.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>544375</wp:author_id><wp:author_login>stoner</wp:author_login><wp:author_email>pierodibello@gmail.com</wp:author_email><wp:author_display_name><![CDATA[stoner]]></wp:author_display_name><wp:author_first_name><![CDATA[Pietro]]></wp:author_first_name><wp:author_last_name><![CDATA[Di Bello]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>11287</wp:term_id><wp:category_nicename>agile</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Agile]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>530068</wp:term_id><wp:category_nicename>agileday</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[AgileDay]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1356</wp:term_id><wp:category_nicename>blogroll</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Blogroll]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>2874598</wp:term_id><wp:category_nicename>continuousimprovement</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ContinuousImprovement]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>148</wp:term_id><wp:category_nicename>design</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Design]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>28070474</wp:term_id><wp:category_nicename>devops</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[DevOps]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>250223</wp:term_id><wp:category_nicename>jira</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Jira]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1546279</wp:term_id><wp:category_nicename>jmeter</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Jmeter]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7092</wp:term_id><wp:category_nicename>metrics</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Metrics]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9220</wp:term_id><wp:category_nicename>mock-objects</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Mock Objects]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>545210</wp:term_id><wp:category_nicename>ooprinciples</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[OOPrinciples]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4599</wp:term_id><wp:category_nicename>planning</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[planning]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>2704</wp:term_id><wp:category_nicename>productivity</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Productivity]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>196</wp:term_id><wp:category_nicename>programming</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[programming]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6652</wp:term_id><wp:category_nicename>rails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Rails]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4872</wp:term_id><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Ruby]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>663317</wp:term_id><wp:category_nicename>shell-programming</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Shell Programming]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>206746</wp:term_id><wp:category_nicename>testability</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Testability]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>testing</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Testing]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1788</wp:term_id><wp:category_nicename>tips</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[tips]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3616</wp:term_id><wp:category_nicename>uml</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[uml]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12235</wp:term_id><wp:category_nicename>velocity</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Velocity]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>45809</wp:term_id><wp:tag_slug>configuration</wp:tag_slug><wp:tag_name><![CDATA[configuration]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4580070</wp:term_id><wp:tag_slug>connectionpool</wp:tag_slug><wp:tag_name><![CDATA[connectionpool]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>617290</wp:term_id><wp:tag_slug>dbcp</wp:tag_slug><wp:tag_name><![CDATA[dbcp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>design</wp:tag_slug><wp:tag_name><![CDATA[Design]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>250223</wp:term_id><wp:tag_slug>jira</wp:tag_slug><wp:tag_name><![CDATA[Jira]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7092</wp:term_id><wp:tag_slug>metrics</wp:tag_slug><wp:tag_name><![CDATA[Metrics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111949</wp:term_id><wp:tag_slug>monitoring</wp:tag_slug><wp:tag_name><![CDATA[monitoring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4652808</wp:term_id><wp:tag_slug>objectoriented</wp:tag_slug><wp:tag_name><![CDATA[objectoriented]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3766</wp:term_id><wp:tag_slug>oracle</wp:tag_slug><wp:tag_name><![CDATA[oracle]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>2704</wp:term_id><wp:tag_slug>productivity</wp:tag_slug><wp:tag_name><![CDATA[Productivity]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6652</wp:term_id><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[Rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4872</wp:term_id><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[Ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111899</wp:term_id><wp:tag_slug>selenium</wp:tag_slug><wp:tag_name><![CDATA[Selenium]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10346</wp:term_id><wp:tag_slug>sql</wp:tag_slug><wp:tag_name><![CDATA[sql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>206746</wp:term_id><wp:tag_slug>testability</wp:tag_slug><wp:tag_name><![CDATA[Testability]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[Testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>1788</wp:term_id><wp:tag_slug>tips</wp:tag_slug><wp:tag_name><![CDATA[tips]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.com/</generator>
<cloud domain='xplayer.wordpress.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>http://1.gravatar.com/blavatar/3cfc994993561e3fe29b8d0033c0dace?s=96&#038;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>XPlayer</title>
		<link>http://xplayer.wordpress.com</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="http://xplayer.wordpress.com/osd.xml" title="XPlayer" />
	<atom:link rel='hub' href='http://xplayer.wordpress.com/?pushpress=hub'/>

	<item>
		<title>About</title>
		<link>http://xplayer.wordpress.com/about/</link>
		<pubDate>Thu, 09 Nov 2006 13:36:00 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false"></guid>
		<description></description>
		<content:encoded><![CDATA[I'm an agile software engineer working in Trento, Italy, at <a href="http://www.xpeppers.com">XPeppers</a>
<a title="My profile" href="http://www.linkedin.com/profile?viewProfile=&amp;key=1225797">My linkedin profile</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2006-11-09 13:36:00</wp:post_date>
		<wp:post_date_gmt>2006-11-09 13:36:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>335</wp:comment_id>
			<wp:comment_author><![CDATA[piero di bello]]></wp:comment_author>
			<wp:comment_author_email>piero@pierodibello.it</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.83.168.3</wp:comment_author_IP>
			<wp:comment_date>2010-06-04 14:45:12</wp:comment_date>
			<wp:comment_date_gmt>2010-06-04 12:45:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ho necessità di parlare con Piero Di Bello il mio omonimo,
sto cercando di contattarlo via skype, ma è sempre scollegato, potrei avere un altro modo per comunicare??]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1275655514]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1359100120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359100120.8661220073699951171875;s:7:"message";s:42:"stoner changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:6:"stoner";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>417</wp:comment_id>
			<wp:comment_author><![CDATA[Matteo]]></wp:comment_author>
			<wp:comment_author_email>m.galli@addiction.it</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.65.120.244</wp:comment_author_IP>
			<wp:comment_date>2013-01-25 00:20:18</wp:comment_date>
			<wp:comment_date_gmt>2013-01-24 22:20:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Salve! Lavoro per un'azienda interessata al metodo agile. E' possibile avere informazioni sui suoi corsi? Grazie]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1359066020]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359066021.0781381130218505859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>418</wp:comment_id>
			<wp:comment_author><![CDATA[stoner]]></wp:comment_author>
			<wp:comment_author_email>pierodibello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xplayer.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>89.190.185.3</wp:comment_author_IP>
			<wp:comment_date>2013-01-25 09:50:22</wp:comment_date>
			<wp:comment_date_gmt>2013-01-25 07:50:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ciao Matteo,
puoi contattarmi via skype (il mio account è pierodibello) o via mail a pietro.di.bello@xpeppers.com

Grazie!]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>544375</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359100224.4144508838653564453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"stoner";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1359100223]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359100462.1414220333099365234375;s:7:"message";s:42:"stoner changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:6:"stoner";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1359100462]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bloated Constructor...</title>
		<link>http://xplayer.wordpress.com/2007/05/15/ascoltare-i-propri-test-quando-la-lunghezza-di-un-costruttore-ci-puo-insegnare-tanto/bloated-constructor-2/</link>
		<pubDate>Tue, 15 May 2007 14:32:07 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2007/05/dscf1963.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2007-05-15 15:32:07</wp:post_date>
		<wp:post_date_gmt>2007-05-15 14:32:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bloated-constructor-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>12</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2007/05/dscf1963.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Test Smells...</title>
		<link>http://xplayer.wordpress.com/2007/04/26/ascoltare-i-propri-test-ovvero-migliorare-il-codice-partendo-dagli-smell-dei-propri-test/test-smells/</link>
		<pubDate>Tue, 15 May 2007 14:36:05 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2007/05/strip_paoladibello.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2007-05-15 15:36:05</wp:post_date>
		<wp:post_date_gmt>2007-05-15 14:36:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>test-smells</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2007/05/strip_paoladibello.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Dummy</title>
		<link>http://xplayer.wordpress.com/dummy/</link>
		<pubDate>Wed, 30 May 2007 13:00:45 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/perche-non-si-dovrebbero-mockizzare-classi-concrete/</guid>
		<description></description>
		<content:encoded><![CDATA[
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2007-05-30 15:00:45</wp:post_date>
		<wp:post_date_gmt>2007-05-30 13:00:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dummy</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dscf1959.jpg</title>
		<link>http://xplayer.wordpress.com/?attachment_id=22</link>
		<pubDate>Fri, 16 Nov 2007 09:41:48 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2007/11/dscf1959.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://xplayer.files.wordpress.com/2007/11/dscf1959.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2007-11-16 11:41:48</wp:post_date>
		<wp:post_date_gmt>2007-11-16 09:41:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dscf1959jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2007/11/dscf1959.jpg</wp:attachment_url>
	</item>
	<item>
		<title>chaos</title>
		<link>http://xplayer.wordpress.com/2007/11/26/microsoft-e-il-continuous-improvement/chaos/</link>
		<pubDate>Mon, 26 Nov 2007 13:37:19 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2007/11/117828084_6962dc13db_m.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2007-11-26 15:37:19</wp:post_date>
		<wp:post_date_gmt>2007-11-26 13:37:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>chaos</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>24</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2007/11/117828084_6962dc13db_m.jpg</wp:attachment_url>
	</item>
	<item>
		<title>504295738_ce55fc543c</title>
		<link>http://xplayer.wordpress.com/?attachment_id=35</link>
		<pubDate>Mon, 23 Mar 2009 09:57:34 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2009-03-23 11:57:34</wp:post_date>
		<wp:post_date_gmt>2009-03-23 09:57:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>504295738_ce55fc543c</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c.jpg</wp:attachment_url>
	</item>
	<item>
		<title>teamwork</title>
		<link>http://xplayer.wordpress.com/?attachment_id=36</link>
		<pubDate>Mon, 23 Mar 2009 10:33:21 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[teamwork]]></content:encoded>
		<excerpt:encoded><![CDATA[teamwork]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2009-03-23 12:33:21</wp:post_date>
		<wp:post_date_gmt>2009-03-23 10:33:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>504295738_ce55fc543c1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c1.jpg</wp:attachment_url>
	</item>
	<item>
		<title>teamwork</title>
		<link>http://xplayer.wordpress.com/2009/03/23/sul-coaching/504295738_ce55fc543c2/</link>
		<pubDate>Mon, 23 Mar 2009 11:07:03 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2009-03-23 13:07:03</wp:post_date>
		<wp:post_date_gmt>2009-03-23 11:07:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>504295738_ce55fc543c2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>38</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c2.jpg</wp:attachment_url>
	</item>
	<item>
		<title>teamwork</title>
		<link>http://xplayer.wordpress.com/2009/03/23/sul-coaching/504295738_ce55fc543c3/</link>
		<pubDate>Mon, 23 Mar 2009 11:08:13 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2009-03-23 13:08:13</wp:post_date>
		<wp:post_date_gmt>2009-03-23 11:08:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>504295738_ce55fc543c3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>38</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c3.jpg</wp:attachment_url>
	</item>
	<item>
		<title>teamwork!</title>
		<link>http://xplayer.wordpress.com/2009/03/23/sul-coaching/504295738_ce55fc543c4/</link>
		<pubDate>Mon, 23 Mar 2009 11:11:32 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2009-03-23 13:11:32</wp:post_date>
		<wp:post_date_gmt>2009-03-23 11:11:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>504295738_ce55fc543c4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>38</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c4.jpg</wp:attachment_url>
	</item>
	<item>
		<title>milano-2003-paola-di-bello.jpg</title>
		<link>http://xplayer.wordpress.com/?attachment_id=49</link>
		<pubDate>Thu, 16 Apr 2009 07:58:57 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2009/04/milano-2003-paola-di-bello.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://xplayer.files.wordpress.com/2009/04/milano-2003-paola-di-bello.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2009-04-16 09:58:57</wp:post_date>
		<wp:post_date_gmt>2009-04-16 07:58:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>milano-2003-paola-di-bellojpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2009/04/milano-2003-paola-di-bello.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Il report generato dalla prima trasformazione XSL</title>
		<link>http://xplayer.wordpress.com/2009/07/06/come-generare-il-report-html-dei-test-eseguiti-con-jmeter/picture-1/</link>
		<pubDate>Fri, 03 Jul 2009 12:30:02 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2009/07/picture-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2009-07-03 14:30:02</wp:post_date>
		<wp:post_date_gmt>2009-07-03 12:30:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>picture-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>51</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2009/07/picture-1.png</wp:attachment_url>
	</item>
	<item>
		<title>sui pascoli innevati di Periasc</title>
		<link>http://xplayer.wordpress.com/2011/03/12/dinamically-add-data-accessor-methods-on-static-rails-data-model/sui-pascoli-innevati-di-periasc/</link>
		<pubDate>Sat, 12 Mar 2011 17:48:02 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2011/03/antagnod.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2011-03-12 19:48:02</wp:post_date>
		<wp:post_date_gmt>2011-03-12 17:48:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sui-pascoli-innevati-di-periasc</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>154</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2011/03/antagnod.jpg</wp:attachment_url>
	</item>
	<item>
		<title>barrique</title>
		<link>http://xplayer.wordpress.com/2011/03/12/dinamically-add-data-accessor-methods-on-static-rails-data-model/this-photo-is-copyright-ryan-mcginnis-no-use-without-prior-license/</link>
		<pubDate>Sat, 12 Mar 2011 18:01:57 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2011/03/4562013259_df71f83204_o.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date>2011-03-12 20:01:57</wp:post_date>
		<wp:post_date_gmt>2011-03-12 18:01:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>this-photo-is-copyright-ryan-mcginnis-no-use-without-prior-license</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>154</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2011/03/4562013259_df71f83204_o.jpg</wp:attachment_url>
	</item>
	<item>
		<title>1000-288-95128.jpg</title>
		<link>http://xplayer.wordpress.com/?attachment_id=184</link>
		<pubDate>Mon, 02 Jan 2012 15:20:14 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2012/01/1000-288-95128.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://xplayer.files.wordpress.com/2012/01/1000-288-95128.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date>2012-01-02 17:20:14</wp:post_date>
		<wp:post_date_gmt>2012-01-02 15:20:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1000-288-95128-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2012/01/1000-288-95128.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/twentyeleven]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning Ruby reimplementing it: attr_reader</title>
		<link>http://xplayer.wordpress.com/?p=193</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=193</guid>
		<description></description>
		<content:encoded><![CDATA[<p>How handy is the attr_reader method? Very handy indeed.</p><p>Never asked yourself how it may be implemented? Just do it!</p><p>This is my take:</p><pre>module Kernel<br /> def <strong>attribute_reader</strong>(attribute)<br />   define_method(attribute) do<br />     instance_variable_get("@#{attribute}")<br />   end<br /> end<br />end</pre><p>What's yours?</p><p>Have fun!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date>2012-02-12 16:41:23</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>attr_reader</title>
		<link>http://xplayer.wordpress.com/2012/02/12/learning-ruby-reimplementing-it-attr_reader/screen-shot-2012-02-12-at-3-46-14-pm/</link>
		<pubDate>Sun, 12 Feb 2012 14:46:44 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-46-14-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date>2012-02-12 16:46:44</wp:post_date>
		<wp:post_date_gmt>2012-02-12 14:46:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen-shot-2012-02-12-at-3-46-14-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>216</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-46-14-pm.png</wp:attachment_url>
	</item>
	<item>
		<title>attr_reader</title>
		<link>http://xplayer.wordpress.com/2012/02/12/learning-ruby-reimplementing-it-attr_reader/screen-shot-2012-02-12-at-3-47-19-pm/</link>
		<pubDate>Sun, 12 Feb 2012 14:47:46 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-47-19-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date>2012-02-12 16:47:46</wp:post_date>
		<wp:post_date_gmt>2012-02-12 14:47:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen-shot-2012-02-12-at-3-47-19-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>216</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-47-19-pm.png</wp:attachment_url>
	</item>
	<item>
		<title>Screen Shot 2012-02-12 at 3.49.12 PM</title>
		<link>http://xplayer.wordpress.com/2012/02/12/attr_writer/screen-shot-2012-02-12-at-3-49-12-pm/</link>
		<pubDate>Sun, 12 Feb 2012 14:50:26 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-49-12-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2012-02-12 16:50:26</wp:post_date>
		<wp:post_date_gmt>2012-02-12 14:50:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen-shot-2012-02-12-at-3-49-12-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-49-12-pm.png</wp:attachment_url>
	</item>
	<item>
		<title>Commenti al post &quot;Don&#039;t Over-Use Mock Objects&quot; di K.Ray</title>
		<link>http://xplayer.wordpress.com/2006/11/09/commenti-al-post-dont-over-use-mock-objects-di-kray/</link>
		<pubDate>Thu, 09 Nov 2006 15:11:07 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2006/11/09/commenti-al-post-dont-over-use-mock-objects-di-kray/</guid>
		<description></description>
		<content:encoded><![CDATA[<font size="2">Tempo fa <a href="http://blogs.codehaus.org/people/theboxx/" title="blog di Giuliano">Giuliano </a>aveva segnalato questo post di K.Ray: <a href="http://homepage.mac.com/keithray/blog/2006/10/31/#DontOverUseMockObjects" title="Don't OverUse MockObjects">Don't Over-Use Mock Objects</a></font>

<font size="2">Mi sembra che le tesi dell'articolo siano un po' forti (<em>"Avoid them. Mocks make your tests more fragile and more tightly-coupled. And at the same time, they reduce the integration-test aspects of TDD. They make your tests larger and more complicated and less readable."</em>). Certo, se usati male possono dare problemi di fragilita' eccessiva del test e di leggibilita' (a meno che non si usi un po' di literate programming con jMock), e soprattutto se non si usano per riflettere su eventuali debolezze del proprio codice (a questo riguardo il blog su <a href="www.mockobjects.com">www.mockobjects.com</a> fa spesso illuminanti esempi di codice che usa scorrettamente i mock).</font>

<font size="2">L'obiezione che i mock ridurrebbero la robustezza dei test e' debole (<em>"If you change an object's API, a mock object's API may not change, making your tests out-of-date with respect to your non-test code"</em>), perche' con EasyMock si usano le API 'vere', pertanto non esite la possibilita' di avere dei metodi 'out of date' (non so come funzioni invece jMock).</font>

<font size="2">L'unica osservazione secondo me con un certo fondamento e' la critica al modo di procedere degli interaction-based testers (<em>"In TDD, you normally write a test, write some code in a target class/method that passes the test. The third step is refactoring. ... Test-Driving with Mocks inverts that order: you create your target class and a mock class up-front, and plan on how they interact, instead of evolving that interaction in TDD's refactoring steps. You pre-judge the class design rather than evolve it."</em>). Anche a me suona innaturale di norma procedere come gli interaction-based testers, ma penso anche che ci siano casi in cui questa 'esplorazione' delle interazioni e' utile.
Suonera' un po' eccessivo, ma qualcuno diceva che la programmazione dei mock in un test e' un po' come un sequence diagram sotto forma di codice! :-)</font>

<font size="2">Siamo invece d'accordo che i mock sono utili per rendere piu' indipendenti i test (<em>"Mocks are tool for decoupling, and I do sometimes use them. I limit my use of Mocks to those situations where the real object will not reliably do what I want. Examples: simulating errors in writing a file; simulating connections with a remote server; simulating errors from remote server."</em>).</font>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2006-11-09 16:11:07</wp:post_date>
		<wp:post_date_gmt>2006-11-09 15:11:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>commenti-al-post-dont-over-use-mock-objects-di-kray</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<wp:comment>
			<wp:comment_id>303</wp:comment_id>
			<wp:comment_author><![CDATA[Hwjfqtoz]]></wp:comment_author>
			<wp:comment_author_email>wuhukfus@hmpiutku.com</wp:comment_author_email>
			<wp:comment_author_url>http://link</wp:comment_author_url>
			<wp:comment_author_IP>68.14.135.179</wp:comment_author_IP>
			<wp:comment_date>2008-12-13 18:44:32</wp:comment_date>
			<wp:comment_date_gmt>2008-12-13 16:44:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks!,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>322</wp:comment_id>
			<wp:comment_author><![CDATA[autoomob]]></wp:comment_author>
			<wp:comment_author_email>autoomob@mail.ru</wp:comment_author_email>
			<wp:comment_author_url>http://autoomob.ru/</wp:comment_author_url>
			<wp:comment_author_IP>66.65.68.57</wp:comment_author_IP>
			<wp:comment_date>2009-11-25 13:57:03</wp:comment_date>
			<wp:comment_date_gmt>2009-11-25 11:57:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool post, but just realised you've got a new design. It looks awesome man, much better than the old one! Nice one! :D]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Affinare la metrica </title>
		<link>http://xplayer.wordpress.com/2006/11/14/4/</link>
		<pubDate>Tue, 14 Nov 2006 12:41:12 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2006/11/14/4/</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="171513421-13112006"><font face="Arial" size="2">La recente  discussione in seno al team XPlayers di <a href="www.quinary.com">Quinary </a>sulle nostre metriche e su come affinarle mi ha fatto riflettere un  po' e volevo condividere con voi questi pensieri, ovvero una proposta di  cambiamento della metrica (da sottoporre a prova sul campo, si  intende).</font></span>

<span class="171513421-13112006"></span>

<span class="171513421-13112006"><font face="Arial" size="2">Il nostro magic  number, dopo varie discussioni su quali fattori includere, e' stato definito  all'inizio in questo semplice </font></span><span class="171513421-13112006"><font face="Arial" size="2">modo</font></span>

<span class="171513421-13112006"></span>

<span class="171513421-13112006"><font face="Arial" size="2"><strong>Magic Number  = NCSS / (LCOM * CCN)</strong></font></span>

<span class="171513421-13112006"></span>

<span class="171513421-13112006"><font face="Arial" size="2">dove le premesse  erano che (ditemi se sbaglio):</font></span>

<span class="171513421-13112006"><font face="Arial" size="2">se  <strong>NCSS</strong> cresce e' un bene    (maggiore  produttivita'?)</font></span>

<span class="171513421-13112006"><font face="Arial" size="2">se  <strong>LCOM</strong> scende e' un bene    (maggiore  coesione)</font></span>

<span class="171513421-13112006"><font face="Arial" size="2">se  <strong>CCN</strong> (McCabe) scende e' un bene    (minore complessita' "di  flusso")</font></span>

<span class="171513421-13112006"></span>

<span class="171513421-13112006"><font face="Arial" size="2">Io penso che in  questa formula NCSS abbia un peso troppo forte, e questo favorisce oscillazioni  come quelle che abbiamo osservato nelle scorse settimane (vedi thread su  "Metriche di oggi"). </font></span>

<span class="171513421-13112006"><font face="Arial" size="2">Ora, non so per  certo se queste oscillazioni siano giuste o meno, e capisco anche che, cosi'  come esiste il 'debito di refactoring' quando si scrive molto codice ma lo si  rifattorizza poco, possa esistere una sorta di 'debito di produttivita diretta'  quando si rifattorizza molto (e quindi si produce un delta di NCSS piccolo o  addirittura negativo).</font></span>

<span class="171513421-13112006"><font face="Arial" size="2">Pero' penso che sia  giusto far entrare nella formula un fattore che premia il codice rifattorizzato,  e pertanto propongo di provare la seguente formula</font></span>

<span class="171513421-13112006"></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006"><font face="Arial" size="2"><strong>Magic Number = NCSS /  (LCOM * CCN * <font color="#ff0000">lunghezza media dei metodi</font>)  </strong></font></span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006"></span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006"><strong>dove <font color="#ff0000">lunghezza media dei  metodi</font> = <font color="#000000"> NCSS /  #metodi</font></strong></span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006"></span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006">il che significherebbe, semplificando i  fattori</span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006"></span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006"><strong>Magic Number = #metodi / (LCOM *  CCN)</strong></span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006"></span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006">questa variazione permette secondo me (ma vorrei  provarla per avere una qualche certezza) di premiare certamente la produzione di  codice (come accadeva per l'NCSS), ma di codice rifattorizzato (che poi sia  ben rifattorizzato questo non saprei come misurarlo).</span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006">In altre parole se scrivo tanto codice nuovo, ma lo  metto in pochi metodi grossi ho un incremento minore di quanto non avrei se lo  stesso codice fosse messo in metodi piu' brevi e  concisi.</span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006"></span></font></span>

<span class="171513421-13112006"><font face="Arial" size="2"><span class="171513421-13112006">Che ne dite?</span></font></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2006-11-14 13:41:12</wp:post_date>
		<wp:post_date_gmt>2006-11-14 12:41:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
	</item>
	<item>
		<title>Le metriche del codice per quelli della NASA...</title>
		<link>http://xplayer.wordpress.com/2006/11/14/le-metriche-del-codice-per-quelli-della-nasa/</link>
		<pubDate>Tue, 14 Nov 2006 12:47:47 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2006/11/14/le-metriche-del-codice-per-quelli-della-nasa/</guid>
		<description></description>
		<content:encoded><![CDATA[Ieri stavo leggendo questo articolo datato 1997 sulle metriche, pubblicato sul sito di un centro della NASA (Software Assurance Technology Center, http://satc.gsfc.nasa.gov/), che tra l'altro ha una sezione dedicata proprio alle metriche nel software (http://satc.gsfc.nasa.gov/metrics/index.html e http://satc.gsfc.nasa.gov/metrics/codemetrics/index.html).

Vabbe', in questo <a href="http://satc.gsfc.nasa.gov/support/CROSS_APR97/oocross.html">articolo </a>si presentano diversi tipi di metriche, sia tradizionali che OO.
Quando parla del numero ciclomatico dice: "<em>In general, <strong>the cyclomatic complexity for a method should be below ten</strong>, indicating decisions are deferred through message passing.</em>"

Un altra metrica tradizionale e' poi la seguente:
"<em>METRIC 3: Comment Percentage
The line counts done to compute the Size metric can be expanded to include a count of the number of comments, both on-line (with code) and stand-alone. The comment percentage is calculated by the total number of comments divided by the total lines of code less the number of blank lines. <strong>The SATC has found a comment percentage of about 30% is most effective. Since comments assist developers and maintainers, this metric is used to evaluate the attributes of Understandability, Reusability, and Maintainability</strong>.</em>"

Quanti progetti legacy per quelli della NASA avrebbe delle ottime metriche? :-)

E comunque voi sapete come mai anche il piu' recente studio sulle metriche OO non arriva al 2000?!

Cercando su google ho trovato articoli vecchi, nessun nuovo studio, niente di niente!
Come mai?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2006-11-14 13:47:47</wp:post_date>
		<wp:post_date_gmt>2006-11-14 12:47:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>le-metriche-del-codice-per-quelli-della-nasa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
	</item>
	<item>
		<title>Il mio feedback sull&#039;Agile Day 2006 - Milano 01.12.06</title>
		<link>http://xplayer.wordpress.com/2006/12/04/il-mio-feedback-sullagile-day-2006-milano-011206/</link>
		<pubDate>Mon, 04 Dec 2006 13:34:24 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2006/12/04/il-mio-feedback-sullagile-day-2006-milano-011206/</guid>
		<description></description>
		<content:encoded><![CDATA[Venerdi' primo dicembre ho partecipato al secondo Agile Day, organizzato a Milano al Centro congressi MilanoFiori.

Innanzitutto devo ringraziare Marco Abis e tutti coloro che hanno contribuito (anche economicamente) alla sua realizzazione.

Di seguito qualche mia considerazione sulla giornata:

Interessante la presentazione del gruppo corse Ferrari (Nicola Canalini e Luca), anche se meno d'impatto di quella dell'anno scorso.
Di quello che hanno detto mi hanno colpito alcune cose:
<ul>
	<li>la grande attenzione che pongono nello <strong>standup meeting</strong>, dove mi sembra di capire che ognuno dice qualcosa.  Addirittura ognuno se lo prepara il giorno prima (che e' piu' o meno quello che facciamo nel nostro team quando compiliamo il journal sul wiki a fine giornata). Ognuno arriva allo standup con una carta con i propri feedback, che ruotano attorno a poche domande:</li>
</ul>
<ol>
<ol>
	<li>cosa ha fatto ieri</li>
	<li>cosa fara' oggi</li>
	<li>di cosa ha bisogno</li>
	<li>problemi incontrati</li>
	<li>comunicazioni generali</li>
</ol>
</li>
</ol>
<ul>
	<li>un forte accenno alla leggibilita' del codice (e noi come siamo messi a riguardo, eh?)</li>
</ul>
<ul>
	<li>per gestire l'alto numero di progetti (circa 100!) e la loro complessita', stabiliscono degli standard a cui tutti si attengono, tipo: c'e' un solo modo di accedere alle basi dati, e chi deve accedere ad una base dati deve seguirlo. In tal modo diventa piu' facile e veloce 'entrare' in un progetto o capire cosa non va.</li>
</ul>
<ul>
	<li>uno sforzo per il miglioramento continuo e per l'auto-organizzazione</li>
	<li>una delle metriche che adottano e monitorano costantemente e' il <strong>numero di test scritti nell'arco di tempo</strong> (ogni giorno, ad ogni iterazione), sia come team che a livello 'individuale'. Il delta dei test scritti dal team viene pubblicato quotidianamente su un monitor visibile a tutti.</li>
</ul>
La presentazione di Davide e Giuliano ha avuto luci ed ombre: bella e frizzante la presentazione con le slide, un po' debole il video, sia per problemi tecnici (non si vedeva/sentiva bene), sia perche' forse piu' che una sessione di pair remoto dava l'impressione di essere una sessione di TDD.

Non sempre ho trovato interessanti alcuni temi delle track (mi e' capitato di non essere interessato a nessuna track che si stava svolgendo in quel momento).

Il pubblico era vasto ma generalmente non sembrava da molto addentro all'xp e al mondo agile, per cui spesso le track tecniche per forza di cose si 'appiattivano' sul livello dei meno esperti. Per carita', questo va benissimo, diffondere l'xp e i principi agili e' una cosa molto importante e positiva, ma penso che il formato dell'<a href="http://www.martinfowler.com/bliki/OpenSpace.html">open-space</a> poco si presti a questa cosa, mentre e' piu' adatto a favorire lo scambio di esperienze tra persone piu' o meno addentro agli argomenti trattati (io me lo immagino come un BOF).

Come alcuni hanno detto lo stanzone dove si teneva la riunione e la sua acustica hanno disturbato non poco lo svolgimento delle track: solo le persone nelle immediate vicinanze della persona che parlava lo riuscivano a sentire, le altre no.
Avrei poi preferito che le track fossero organizzate in modo che sembrassero meno delle presentazioni da uno a molti e piu' una discussione tra tutti: magari mettersi tutti attorno ad un tavolo avrebbe semplificato, magari no. Non so.

<a href="http://flickr.com/photo_zoom.gne?id=312821717&amp;size=o">Io</a> ho 'tenuto' due track: una sui test ("Scrivere Test che incoraggiano il cambiamento") con <a href="http://redgreenrefactor.it/wordpress/">Enrico Mangano</a> e una sui Mock Objects. In tutti e due i casi siamo andati a volte fuori tema, soprattutto con la prima sui test. Sui mock objects sono soddisfatto a meta': alcune persone erano interessate, ma una buona meta' non sapeva cosa fossero i mock o comunque non li avava mai utilizzati. Avrei preferito tornare a casa con qualcosa di nuovo sui mock e sul loro uso, ma niente da fare. Pazienza

In generale sono tornato a casa con pochi veri spunti di riflessione, giusto quelli che ho detto di ferrari e Cirillo sul ROI, qualcosa sulle metriche e basta.

PS: Gabriele Lana ha fatto <a href="http://flickr.com/photos/gabriele_lana/tags/agileday06/">qualche foto</a> della giornata...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2006-12-04 14:34:24</wp:post_date>
		<wp:post_date_gmt>2006-12-04 13:34:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>il-mio-feedback-sullagile-day-2006-milano-011206</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agileday"><![CDATA[AgileDay]]></category>
		<wp:comment>
			<wp:comment_id>273</wp:comment_id>
			<wp:comment_author><![CDATA[Il mio feedback sull&#8217;agile day 2007 &laquo; XPlayer]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://xplayer.wordpress.com/2007/11/26/il-mio-feedback-sullagile-day-2007/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.44.26</wp:comment_author_IP>
			<wp:comment_date>2007-11-26 15:54:16</wp:comment_date>
			<wp:comment_date_gmt>2007-11-26 13:54:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Luned&igrave;, 26 Novembre 2007 in AgileDay   Complimenti a Marco e agli altri organizzatori, l&#8217;agile day 2007 e&#8217; stato molto interessante, con contenuti ed organizzazione migliori dello scorso anno. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Law Of Demeter</title>
		<link>http://xplayer.wordpress.com/2006/12/11/law-of-demeter/</link>
		<pubDate>Mon, 11 Dec 2006 13:31:48 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2006/12/11/law-of-demeter/</guid>
		<description></description>
		<content:encoded><![CDATA[Di recente ho seguito un thread intitolato <a href="http://tech.groups.yahoo.com/group/extremeprogramming/messages/122627?threaded=1&amp;m=e&amp;var=1&amp;tidx=1" title="link al thread">"The Law of Demeter and Testability"</a> sulla lista xp americana.

A partire dal primo post di <a href="http://www.jayflowers.com/WordPress/">Jay Flowers</a> (niente di travolgente), il discorso si e' poi spostato sulla legge di demeter di per se', il cui 'peso' personalmente non ho mai capito fino in fondo. Ne' tantomeno mi sembra che se ne parli molto, al contrario magari di altri principi piu' noti come OCP, DIP, LSP, SRP, eccetera.

Alcuni messaggi di questo thread mi hanno fatto capire meglio questo 'principio' (chiamarla legge fa un po' ridere) e a vederlo in un'ottica diversa.

Vi sottopongo gli spunti piu' interessanti, sperando possano esservi di stimolo quanto lo sono stati per me

Michael Feathers:
<blockquote><em> It's a great article, but the thing to remember about LoD is that it is not iron-clad. There are cases where you're better off not having demetered code. The classic example is the Excel Object model. You get the workbook from the application and the worksheet from the workbook, and drill down through ranges to cells. It works because the model is very stable. </em>

<em>In general, when the structure of data has meaning, LoD gets in the way; when you care more about behavior (and usually you can), LoD is the way to go. </em></blockquote>
Ron Jeffries:
<blockquote><em> Yes ... the observation about structure is a good one. If you think of what you'd have to do, otherwise, with the Excel model, you'd have to make each call to Excel, parameterized with workbook name, worksheet name, maybe range, then cell. Pulling the innards out amounts to an addressing prefix, or stepping down through a hierarchy.</em></blockquote>
<blockquote><em>Mostly, though, I'd say LoD is the way to bet. </em></blockquote>
E infine Brad Appleton:
<blockquote><em>I actually took a class from Dr. Lieberherr on the full Demeter method (of which LoD is one small part). Having had the benefit of that, I think I have a lot of additional insight into the above.
</em></blockquote>
<blockquote><em>The issue with the LoD is that, the way it is usually stated, the assumption is any/every class in an O-O program should be exhibiting functional behavior and hiding the details of what it contains, and how it contain them.</em></blockquote>
<blockquote><em>There are classes whose job is to encapsulate functional behavior/services, and there are classes whose job is to encapsulate structural behavior/services. That is to say that for some classes, the "secret" they need to "hide" isnt the fact that they contain some kinds of objects, but the details of HOW they contain those objects.
Simple examples of these would be data-structures, lists, collections, iterators, dictionaries, data-stores, etc. Accessing the interfaces of the objects contained by such encapsulated structures actually doesnt violate the principle behind the LoD. But because of the way LoD is stated in such an oversimplified manner, those things appear to be violations when they really arent.</em></blockquote>
<blockquote><em>When a method-call returns a subobject of its containing object, then consider that invocation to be a violation of LOD *only* *if* the containing object is supposed to encapsulate behavior concerning its subobjects. If the object really only needs to encapsulate structural details about HOW it contains that object (rather than WHAT it contains), then it's not really a violation of LoD.</em></blockquote>
<blockquote><em>So it's less about whather or not the caller cares about the behavior or structure of the data, it more about whather the callee cares about (should be encapsulating) the behavior or the structure of what it contains. </em></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2006-12-11 14:31:48</wp:post_date>
		<wp:post_date_gmt>2006-12-11 13:31:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>law-of-demeter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ooprinciples"><![CDATA[OOPrinciples]]></category>
	</item>
	<item>
		<title>Ascoltare i propri test, ovvero migliorare il codice partendo dagli smell dei propri test</title>
		<link>http://xplayer.wordpress.com/2007/04/26/ascoltare-i-propri-test-ovvero-migliorare-il-codice-partendo-dagli-smell-dei-propri-test/</link>
		<pubDate>Thu, 26 Apr 2007 12:36:26 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2007/04/26/ascoltare-i-propri-test-ovvero-migliorare-il-codice-partendo-dagli-smell-dei-propri-test/</guid>
		<description></description>
		<content:encoded><![CDATA[Steve Freeman e Nat Pryce hanno iniziato una serie di interessanti post sul loro blog <a href="http://www.mockobjects.com">mockobjects </a>sul tema dei <a href="http://www.mockobjects.com/labels/listening%20to%20the%20tests.html">Test Smells,</a>  ovvero su come 'ascoltare' i propri test per scoprire possibilita' di miglioramento nel design del codice sotto test
<blockquote><em>    In our experience, when we find that our tests are awkward to write, it's usually because the design of our target code can be improved.</em></blockquote>
Una cosa su cui mi trovo d'accordo, piu' che altro perche' ho avuto la stessa esperienza in passato (e anche nel presente!)

<a href="http://xplayer.files.wordpress.com/2007/05/strip_paoladibello.jpg" title="Test Smells…"><img src="http://xplayer.files.wordpress.com/2007/05/strip_paoladibello.jpg" alt="Test Smells…" height="283" width="1278" /></a>

Il primo post della serie e'  <a href="http://www.mockobjects.com/2007/04/test-smell-i-need-to-mock-object-i-cant.html">Test Smell: I need to mock an object I can't replace (without magic)</a>,  dove si parte da un codice piuttosto 'chiuso', con dipendenze nascoste (magari usando dei Singleton), e passo passo lo si rifattorizza, aprendolo, prima introducendo un fake (o stub che dir si voglia) e poi passando ai mock, mostrando come il codice migliori, prima esplicitando le dipendenze e poi assegnando meglio le responsabilita'.

Se vi capita dategli un'occhiata!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2007-04-26 13:36:26</wp:post_date>
		<wp:post_date_gmt>2007-04-26 12:36:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ascoltare-i-propri-test-ovvero-migliorare-il-codice-partendo-dagli-smell-dei-propri-test</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="design"><![CDATA[Design]]></category>
		<category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
		<category domain="category" nicename="ooprinciples"><![CDATA[OOPrinciples]]></category>
		<category domain="category" nicename="testability"><![CDATA[Testability]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
	</item>
	<item>
		<title>Ascoltare i propri test: quando la lunghezza di un costruttore ci puo&#039; insegnare tanto...</title>
		<link>http://xplayer.wordpress.com/2007/05/15/ascoltare-i-propri-test-quando-la-lunghezza-di-un-costruttore-ci-puo-insegnare-tanto/</link>
		<pubDate>Tue, 15 May 2007 13:15:07 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2007/05/15/ascoltare-i-propri-test-quando-la-lunghezza-di-un-costruttore-ci-puo-insegnare-tanto/</guid>
		<description></description>
		<content:encoded><![CDATA[Ancora una volta i post su mockobjects.com mi ricordano che c'e' molto da imparare dai propri test. E' il caso di <a href="http://www.mockobjects.com/2007/04/test-smell-bloated-constructor.html">Test Smell: Bloated Constructor</a> e <a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html">Test Smell: Everything is mocked.</a>

<a href="http://xplayer.files.wordpress.com/2007/05/dscf1963.jpg" title="Bloated Constructor…"><img src="http://xplayer.files.wordpress.com/2007/05/dscf1963.thumbnail.jpg" alt="Bloated Constructor…" align="middle" /></a>

Se si usa il TDD, capita di finire per avere oggetti con un costruttore gigante, che prende una lista infinita di parametri, tipicamente i peers (ovvero i collaboratori) dell'oggetto. In tali casi fare i test, e soprattutto farli coi mock, e' la morte. E in molti casi ce la si prende coi mock, rei di complicare i test.

Ma spesso la difficolta' a testare un oggetto e' sintomo di problemi di design sull'oggetto stesso...  E riflettere su queste difficolta' e riportarle sul codice sotto test ci consente di migliorarne il design. O, come dice Steve Freeman, <em>being sensitive to complexity in the tests can help me clarify my designs.</em>

In questo caso un costruttore lungo potrebbe indicare che magari ci sono oggetti che potrebbero essere raggruppati a formare un nuovo oggetto. Questo semplifica anche i test dell'oggetto da cui siamo partiti e consente di ridurre le sue responsabilita', tutte cose buone e giuste.

Freeman usa due euristiche per l'estrazione di componenti:
<blockquote><em>When I'm extracting implicit components, I look first for two conditions: arguments that are always used together in the class, and that have the same lifetime. That usually finds me the concept, then I have the harder task of finding a good name.</em></blockquote>
Nel secondo post che cito all'inizio, <a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html">Test Smell: Everything is mocked</a>, si sfata un mito duro a morire: non si devono fare mock per tutte le classi che si incontrano.

In particolare non e' assolutamente necessario mockizzare value objects, e soprattutto "don't mock third-party libraries!". Piuttosto, un approccio migliore e' quello di far emergere col TDD e i mock un sottile straterello di codice che faccia da adaptor verso le API esterne, e che fornisca al nostro dominio i servizi di cui ha bisogno.

<img src="http://www.mockobjects.com/uploaded_images/mockable-adaptor-752684.png" height="192" width="256" />

E poi testare questo thin layer con dei test di integrazione che garantiscano che ci si agganci correttamente alla libreria.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2007-05-15 14:15:07</wp:post_date>
		<wp:post_date_gmt>2007-05-15 13:15:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ascoltare-i-propri-test-quando-la-lunghezza-di-un-costruttore-ci-puo-insegnare-tanto</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="design"><![CDATA[Design]]></category>
		<category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
	</item>
	<item>
		<title>Perche&#039; non si dovrebbero mockizzare classi concrete</title>
		<link>http://xplayer.wordpress.com/2007/05/30/perche-non-si-dovrebbero-mockizzare-classi-concrete/</link>
		<pubDate>Wed, 30 May 2007 13:03:26 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2007/05/30/perche-non-si-dovrebbero-mockizzare-classi-concrete/</guid>
		<description></description>
		<content:encoded><![CDATA[Mi sono sempre chiesto perche' mai Steve Freeman e gli altri 'padri' dei Mock Objects e dello stile di testing interaction-based sconsigliassero di fare mock di classi concrete, tanto che <em>jMock </em>ed <em>EasyMock </em>non supportavano questa possibilita' 'nativamente', ma si doveva installare un'estensione a parte, che usa la famosa libreria <em>CGLIB </em>(per inciso con il nuovo jMock 2 e' possibile fare mock di classi concrete, ma si deve usare la classe UnsafeHackConcreteClassImposteriser, ed il nome dice tutto di come scoraggino questa pratica).

Tanto che tempo fa avevo anche commentato un <a href="http://www.mockobjects.com/2006/10/jmock-listening-to-opinionated.html#comments" title="Commento al post di Freeman">post di Freeman</a> chiedendogli perche' lui giudicasse il mock di classi concrete come una sorta di ultima possibilita' da adottare solo in casi di emergenza (es quando si affronta codice legacy particolarmente ostico e <em>chiuso</em>). E lui mi aveva risposto cosi':
<blockquote><font color="#000000"><em>Because then the interface is implicit, which means you can't see it and you haven't given it a name. Instead of using the test to expose a feature of the design, you have more to think about whenever you're working in that area: is the method overwritten? is it in a super class? what about the state of the rest of the class I'm extending? That sort of thing.</em></font>

<font color="#000000"><em>For me, the CGLIB should have a "Break Glass in Case of Emergency" written on the front. It's useful in tight situations, but not to be recommended.</em></font></blockquote>
Eppero' nonostante la sua risposta la cosa non mi era ancora chiara fino in fondo.
Poi un recente post su mockobjects.com (<a href="http://www.mockobjects.com/2007/04/test-smell-mocking-concrete-classes.html"><strong>Test Smell: Mocking concrete classes</strong></a>) mi ha finalmente aiutato a capire meglio le cose.

Il fatto e' che lo scopo del TDD con i Mock Objects e' quello di scoprire e far emergere relazioni tra oggetti, e dare nomi a queste relazioni. Se pero' si mantiene la relazione tra oggetti a livello di classi concrete, queste relazioni rimangono per cosi' dire piu' nascoste, implicite, e quindi diventa difficile individuarle e darle un nome.

Cito direttamente il post, laddove spiega cosa non va con i mock di classi concrete:
<blockquote><font color="#000000"><em>The problem with this approach is that it leaves the relationship between the objects implicit.
I hope we've made clear by now that <strong>the intention of Test-Driven Development with Mock Objects is to discover relationships between objects</strong>.
If I subclass, there's nothing in the domain code to make such a relationship visible, just methods on an object. This makes it harder to see if the service that supports this relationship might be relevant elsewhere and I'll have to do the analysis again next time I work with the class.</em></font></blockquote>
<img src="//dictionarytip/skin/book.png" style="border:1px solid blue;z-index:90;position:absolute;left:505px;top:293px;" />

Addirittura si spinge a dire che lasciando le relazioni tra oggetti a livello di classi concrete, si rischia di violare l'<a href="http://www.objectmentor.com/resources/articles/isp.pdf">Interface Segregation Principle</a>, perche' le classi dipendono da una interfaccia piu' grande di quella che usano veramente.

E poi poco piu' avanti spiega che l'approccio <em>mockist</em> aiuta anche a dare nomi alle relazioni ed ai ruoli, e a ragionare piu' in termini di dominio piuttosto che di implementazione:
<blockquote><font color="#000000"><em>There's a more subtle but powerful reason for not mocking concrete classes.
As part of the TDD with Mocks process, I have to think up names for the relationships I discover—in this example the <code>ScheduledDevice</code>. I find that this makes me think harder about the domain and teases out concepts that I might otherwise miss.
Once something has a name, I can talk about it. </em></font></blockquote>
Il tutto e' poi riassunto bene nell'altro post, <a href="http://www.mockobjects.com/2007/05/what-tests-will-tell-you.html">What the tests will tell you</a>, da leggere e rileggere, dove elenca alcuni benefici derivanti dall'approccio TDD+MockObjects
<ul>
	<li><em>Keeping knowledge local</em></li>
	<li><em>If it's explicit I can name it</em></li>
	<li><em>More names mean more domain information</em></li>
	<li><em>Pass behaviour rather than data</em></li>
</ul>
Detto questo, ammetto che sono sempre stato affascinato da questo approccio ma non ho mai trovato la forza necessaria per decidere di applicarlo un po' piu' sistematicamente, metterlo alla prova insomma.

Un po' perche' nel mio team da sempre si usa l'approccio classico, e l'approccio interaction-based e' visto con qualche dubbio/sospetto, un po' perche' i nostri progetti per ora sono tutti Java 1.4 e quindi buona parte delle comodita' delle versioni piu' recenti dei framework jMock e Easymock te le perdi (soprattutto la loro maggiore <em>letteralita'</em>, cosa importante per avere dei test validi).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2007-05-30 15:03:26</wp:post_date>
		<wp:post_date_gmt>2007-05-30 13:03:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>perche-non-si-dovrebbero-mockizzare-classi-concrete</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="design"><![CDATA[Design]]></category>
		<category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
		<category domain="category" nicename="ooprinciples"><![CDATA[OOPrinciples]]></category>
		<wp:comment>
			<wp:comment_id>255</wp:comment_id>
			<wp:comment_author><![CDATA[riffraff]]></wp:comment_author>
			<wp:comment_author_email>rff_rff@yahoo.it</wp:comment_author_email>
			<wp:comment_author_url>http://www.goto10.it</wp:comment_author_url>
			<wp:comment_author_IP>83.181.234.111</wp:comment_author_IP>
			<wp:comment_date>2007-09-06 12:15:24</wp:comment_date>
			<wp:comment_date_gmt>2007-09-06 10:15:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[questo post l'ho letto ora dopo quasi 4 mesi.. peccato che non scrivi più, era interessante :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Come usare l&#039;UML?</title>
		<link>http://xplayer.wordpress.com/2007/10/24/come-usare-luml/</link>
		<pubDate>Wed, 24 Oct 2007 09:13:06 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2007/10/24/come-usare-luml/</guid>
		<description></description>
		<content:encoded><![CDATA[ Recentemente mi e' stato chiesto come si  sposano XP e l'utilizzo del UML, ovvero se e' molto usato il design delle classi in UML prima di implementarle.

Per mia esperienza, l'UML puo' essere utile come strumento di comunicazione nel team, per trasmettere una idea di design, per esplorare la struttura statica e dinamica degli oggetti di un sistema. Una volta ottenuto il risultato (comunicare l'idea, chiarirsi le idee, mettere a fuoco una issue), si butta via il diagramma.

Non fraintendetemi pero'.

Una delle prime cose che ho studiato quando sono entrato nel <a href="http://www.quinary.it/pagine/about/extreme_frame.htm">team Xplayers di Quinary</a> e' proprio la notazione UML. In particolare sono magistrali alcuni capitoli del libro di Larman “Applying UML and Patterns” e alcuni articoli di Bob Martin (per esempio <a href="http://www.objectmentor.com/resources/articles/umlCollaborationDiagrams.pdf">questo</a>). Questo per dire che un bravo xper deve conoscere bene l'UML perche' deve saperlo leggere e scrivere (in particolare come dicevo i class diagram, i collaboration diagram e i sequence diagram), cosi' come deve conoscere mooolto bene i pattern, perche' deve saperli riconoscere quando emergono dal design del codice in evoluzione (stessa cosa vale per i principi dell'OO).

Uno degli usi migliori per mia esperienza della notazione UML e' per esplorare un sistema legacy, ovvero per capire che tipo di legami e di dinamiche ci sono dietro al sistema, magari disegnando qualche class diagram e/o collaboration diagram. E' quindi molto utile per avere una visione di insieme, seppure molto limitata, di un sistema. Anche qui si disegna il diagramma, e poi, appena diventa inutile (si spera presto), lo si butta via.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2007-10-24 11:13:06</wp:post_date>
		<wp:post_date_gmt>2007-10-24 09:13:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>come-usare-luml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uml"><![CDATA[uml]]></category>
		<wp:comment>
			<wp:comment_id>259</wp:comment_id>
			<wp:comment_author><![CDATA[papo]]></wp:comment_author>
			<wp:comment_author_email>jacopo.franzoi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogs.ugidotnet.org/papo</wp:comment_author_url>
			<wp:comment_author_IP>217.133.205.226</wp:comment_author_IP>
			<wp:comment_date>2007-10-25 09:18:36</wp:comment_date>
			<wp:comment_date_gmt>2007-10-25 07:18:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[condivido in pieno, sopratutto il fare-e-buttare i diagrammi. aggiungo solo due cose:
* fare un diagramma mi torna utile quando sto per rifattorizzare, per esplorare soluzioni alternative pochi istanti prima di scrivere il codice
* aggiungerei alla lista degli indispensabili i diagrammi UML di stato

ciao
-papo-]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Come Object Mentor guida la transizione XP dai propri clienti</title>
		<link>http://xplayer.wordpress.com/2007/11/16/come-object-mentor-guida-la-transizione-xp-dai-propri-clienti/</link>
		<pubDate>Fri, 16 Nov 2007 09:34:03 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2007/11/16/come-object-mentor-guida-la-transizione-xp-dai-propri-clienti/</guid>
		<description></description>
		<content:encoded><![CDATA[Di recente <a href="http://blog.objectmentor.com/articles/category/young-bobs-rants">Bob Koss</a> di Object Mentor ha pubblicato un post sul <a href="http://blog.objectmentor.com/articles/2007/11/15/velocity-inflation-triggers-productivity-recession" title="Velocity Inflation Triggers Productivity Recession">possibile cattivo uso della velocity come metrica di processo</a>.

A parte il tema del post, Bob parla anche di come tipicamente Object Mentor guida la transiziona ad XP dai loro clienti.  Prima di tutto tengono un corso su XP per tutti (gruppo di programmatori e gruppo di customers).
<blockquote><em>When Object Mentor does an XP transition with a client, we start with our XP Immersion course to get everybody on the same page about what our goals are.</em></blockquote>
Poi due istruttori seguono separatamente i due gruppi, uno insegna ai programmatori le pratiche piu' tecniche, l'altro invece affronta con i customers le pratiche di planning e managing del progetto XP (scrivere le carte, le iterazioni, la pianificazione incrementale, ...)
<blockquote><em>Ideally, we use two instructors, one to train the programmers in topics such as Test Driven Development and Refactoring, and the other coach teaches story writing, iteration planning, and release planning to the customer team. </em></blockquote>
Poi i due gruppi lavorano assieme per un giorno intero ad un progetto di prova, per far vedere a tutti come funziona il processo XP
<blockquote><em>We then bring the two groups together for a day and have the customer team drive the programming team on a classroom exercise so everybody can experience how the process works.</em></blockquote>
I due mentor  rimangono poi per seguire le prime iterazioni del progetto "vero"
<blockquote><em>The instructors then stay and work with the team for a few iterations, coaching them on how to use what they learned in class on their own project.</em></blockquote>
E poi tornano di tanto in tanto per vedere come vanno le cose, magari partecipano alle retrospective di iterazione per vedere quali sono i problemi, come vanno le metriche (in questo caso la velocity).

Interessante, no?

Quanto meno perche' mi fa riflettere su quali siano i modi migliori per introdurre XP in una realta' nuova. Certo, qui c'e' un cliente che coscentemente decide di adottare XP e paga (tanto immagino) per essere guidato nella transizione verso un processo agile.

La realta' in cui invece mi trovo io e' diversa, si deve procedere in modo incrementale, a piccoli passi, perche' qui nessuno (tra i dirigenti almeno) ha chiesto di adottare XP, anche se c'e' molto interesse e (qualche) consapevolezza dei punti deboli dell'attuale processo. C'e' quindi un lavoro doppio, dal basso verso i programmatori e dall'altro verso i manager, per far vedere i piccoli miglioramenti che si possono ottenere lavorando in modo agile. Miglioramenti che consentono di lavorare in modo piu' divertente e soddisfacente (il famoso <a href="http://video.google.com/videoplay?docid=7830246530742207581" title="google video">"ease at work"</a> di cui parlava Kent Beck in una sua presentazione tempo fa').

Vabbe' magari ne parlero' in un altro post, visto che sto andando fuori tema!

Alla prossima!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2007-11-16 11:34:03</wp:post_date>
		<wp:post_date_gmt>2007-11-16 09:34:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>come-object-mentor-guida-la-transizione-xp-dai-propri-clienti</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="category" nicename="velocity"><![CDATA[Velocity]]></category>
	</item>
	<item>
		<title>La mia piccola illuminazione di oggi: GANTT planning vs XP planning</title>
		<link>http://xplayer.wordpress.com/2007/11/19/la-mia-piccola-illuminazione-di-oggi-gantt-planning-vs-xp-planning/</link>
		<pubDate>Mon, 19 Nov 2007 16:23:08 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2007/11/19/la-mia-piccola-illuminazione-di-oggi-gantt-planning-vs-xp-planning/</guid>
		<description></description>
		<content:encoded><![CDATA[La mia piccola illuminazione di oggi riguarda il modo tradizionale di pianificare e gestire un progetto software, ovvero con un bel <a href="http://en.wikipedia.org/wiki/Gantt_chart">GANTT</a> e MS Project.

Per la prima volta ho dovuto analizzare il GANTT per la nuova release di un progetto su cui sto lavorando, e rivedere alcune attivita' a nostro carico per capire se mancava qualcosa e verificare le dipendenze e le stime. Ci mancherebbe, se c'e' da fare, si fa', ma ho sentito pian piano sorgere un senso di frustrazione...
Ho poi capito il senso di fastidio che provavo: il GANTT (almeno, questo GANTT) e' piuttosto "tecnical-task centrico", ovvero organizza le attivita' "tecniche", ma non considera in nessun modo le features dal punto di vista del customer.

Tutto il contrario della pianificazione in XP, che e' "business-value centrica", ovvero usa le user stories ("units of customer-visible functionality") per pianificare pezzi di funzionalita', a prescindere poi dai task tecnici che possono esserci dietro (e che vanno certo esplicitati, se e' il caso, ma che non hanno valore di business di per se').

Ma perche' questa differenza?

Forse questo e' dovuto al fatto che, mentre il GANTT e' uno strumento <u>del project manager</u> per guidare il team di sviluppo (il customer lo vedra' mai?), le user stories sono invece uno strumento <u>del customer</u> per guidare lo stesso team.
In altre parole la pianificazione in XP coinvolge in prima persona il team dei customers (project manager, product manager, marketing, utenti, ...), mentre in un progetto tradizionale la dinamica e' del tipo "eccoti le specifiche, ci si rivede a fine progetto".

Sta di fatto che io, abituato a ragionare innanziutto per user stories, mi sono ritrovato piuttosto a disagio a ragionare per task tecnici, perche' facevo fatica a vederci dietro le funzionalita', e  spesso anzi trovavo che la somma dei task tecnici non bastava a coprire la funzionalita' che il sistema dovrebbe realizzare.

E' un po' come descrivere un quadro attraverso la somma dei tratti del pennello che lo compongono... si rischia di perdere il senso complessivo dell'opera.
Il rischio nel caso del software e' quello perdere tra i tanti task tecnici i veri obbiettivi di una feature, ovvero produrre qualcosa che risponde a delle necessita' del customer.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2007-11-19 18:23:08</wp:post_date>
		<wp:post_date_gmt>2007-11-19 16:23:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>la-mia-piccola-illuminazione-di-oggi-gantt-planning-vs-xp-planning</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="category" nicename="planning"><![CDATA[planning]]></category>
		<wp:comment>
			<wp:comment_id>271</wp:comment_id>
			<wp:comment_author><![CDATA[papo]]></wp:comment_author>
			<wp:comment_author_email>jacopo.franzoi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogs.ugidotnet.org/papo</wp:comment_author_url>
			<wp:comment_author_IP>217.133.205.226</wp:comment_author_IP>
			<wp:comment_date>2007-11-20 10:55:53</wp:comment_date>
			<wp:comment_date_gmt>2007-11-20 08:55:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[non ho mai avuto il piacere di lavorare con un GANTT (se non per l`universita'), ma la mia idea e' che, come in molti altri casi, il problema non stia nello strumento ma nell`uso che se ne fa.

in questi giorni sto approfondendo proprio il planning XP, e quello che posso notare e' che un diagramma GANTT usato in un processo tradizionale e':
* immutabile, o comunque ogni sua modifica e' vista come una eccezione e non una norma
* basato su stime fatte dal management invece che stime fatte dagli sviluppatori
* di lungo termine, cioe' una itera release (qualche mese)

di contro, la pianificazione in XP ha altre caratteristiche:
* viene costantemente aggiornata, sulla base della nuova esperienza e delle misure di velocita'
* viene fatta su piu' livelli: release (mesi), iterazione (settimane), singola giornata (penso alla todo-list)

come dicevi tu poi c`e' la differenza tra task basati su funzionalita' da realizzare in XP e task prettamente tecnici. non escluso che in un progetto XP ci sia un`attivita' tipo "realizzare lo script di deploy del sistema X sulla macchina Y", ma quanche in questo caso il task nasce da un esplicito desiderio del cliente.

quindi, piu' che nello strumento, io vedo la differenza nella pratica di pianificazione. cioe', raggruppare le storie di un`iterazione e ordinarle per priorita' non e' molto diverso da avere un insieme di blocchi in sequenza su un diagramma, entrambi gli strumenti comunicano un intento. cambia invece l`uso che ne faro'.

ciao!
-papo-]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>272</wp:comment_id>
			<wp:comment_author><![CDATA[stoner]]></wp:comment_author>
			<wp:comment_author_email>pierodibello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://stoner.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>212.48.15.144</wp:comment_author_IP>
			<wp:comment_date>2007-11-20 11:08:06</wp:comment_date>
			<wp:comment_date_gmt>2007-11-20 09:08:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hai ragione, e' la stessa conclusione a cui sono arrivato io dopo aver scritto il post. Si tratta pur sempre di uno strumento e quindi tutto dipende dall'uso che se ne fa'.
Quello che pero' posso dirti e' che in realta' l'uso che il nostro PM fa del GANTT e' poco tradizionale, perche' 

1. Proprio ieri io e il mio collega abbiamo ristimato tutta la parte a nostro carico, dettagliando i task e segnalando quelli che erano sfuggiti alla prima stesura del GANTT
2. Sempre ieri, ristime alla mano, siamo andati dal PM a segnalare l'attuale inconsistenza del GANTT e ci siamo messi ad aggiornarlo assieme
3. Si tratta di un GANTT di release, ovvero abbraccia un periodo di 2 mesi circa, che corrisponde appunto alla release 2.0 del prodotto.

Se mai faro' il Technical Leader di un progetto qui, cerchero' di usare (e soprattutto far usare) le user stories, in modo che alla peggio si tiene traccia di quelle nel GANTT. Lo so, per certi versi e' una eresia, ma potrebbe essere un passo verso la pianificazione agile, visto che altri elementi ci sono gia' (la disponibilita' a rivedere i piani e a far stimare i programmatori).

Grazie papo per il feedback!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>544375</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Microsoft e il continuous improvement</title>
		<link>http://xplayer.wordpress.com/2007/11/26/microsoft-e-il-continuous-improvement/</link>
		<pubDate>Mon, 26 Nov 2007 13:17:04 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2007/11/26/microsoft-e-il-continuous-improvement/</guid>
		<description></description>
		<content:encoded><![CDATA[Su InfoQ <a href="http://www.infoq.com/news/2007/11/criticism-from-microsoft-devlead">si parla</a> di tal Jay Bazuzi, "<span style="font-style:italic;">Development Lead for the C# Editor</span>", che lascia Microsoft e che in occasione di questo "evento", ha postato sul suo blog delle<a href="http://blogs.msdn.com/jaybaz_ms/archive/2007/11/09/parting-words-for-dear-friends.aspx"> riflessioni su alcuni punti deboli nello sviluppo del sw in Microsoft</a>.

<img src="http://farm1.static.flickr.com/68/204873356_bdd9d84cb4.jpg" alt="sunset in val di casies" height="375" width="500" />
A parte le osservazioni su come in Microsoft si usa l'OO o si applica refactoring, l'ultimo punto e' particolarmente interessante, quando parla di "doing better".

Le domande che Jay raccomanda di farsi per migliorare (e che lui personalmente si faceva e faceva al suo team) sono
<ul>
	<li><em>“How can I make sure this problem goes away forever?”</em></li>
	<li><em>“How can I produce fewer bugs?”</em></li>
	<li><em>“How can I make it easier to fix the bugs I have?”</em></li>
	<li><em>“How can I make it easier to respond to change quickly?”</em></li>
	<li><em>“How can I make it easier to make my software fast enough?”</em></li>
</ul>
Mica paglia!

Che sotto sotto Jay volesse rendere piu' agile Microsoft? :-)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2007-11-26 15:17:04</wp:post_date>
		<wp:post_date_gmt>2007-11-26 13:17:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-e-il-continuous-improvement</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="category" nicename="continuousimprovement"><![CDATA[ContinuousImprovement]]></category>
	</item>
	<item>
		<title>Il mio feedback sull&#039;agile day 2007</title>
		<link>http://xplayer.wordpress.com/2007/11/26/il-mio-feedback-sullagile-day-2007/</link>
		<pubDate>Mon, 26 Nov 2007 13:54:11 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2007/11/26/il-mio-feedback-sullagile-day-2007/</guid>
		<description></description>
		<content:encoded><![CDATA[Complimenti a Marco e agli altri organizzatori, l'agile day 2007 e' stato molto interessante, con contenuti ed organizzazione migliori dello <a href="http://xplayer.wordpress.com/2006/12/04/il-mio-feedback-sullagile-day-2006-milano-011206/">scorso anno</a>.

Cosa mi e' piaciuto:
<ul>
	<li>lo speak di Tim Mackinnon, uno dei padri dei mock objects. In particolare:
<ul>
	<li>l'accento sull'appreciative inquiry e sul positive thinking</li>
	<li>le pratiche da lui adottate, in particolare quelle a supporto della riflessivita' e del miglioramento continuo del team, come la timeline e la retrospective</li>
</ul>
</li>
	<li>l'esperienza di <a href="http://blog.java2me.org/antonio-terreno-home-page/">Antonio Terreno</a> su un progetto in ThoughtWorks dove c'era stato un cambio totale di team, e si e' riusciti a fare bene</li>
	<li>le incursioni di Francesco Cirillo, vedi la <a href="http://www.metodiagili.it/campagna-anti-if.html">campagna anti-if </a> (comprate la maglietta anti-if!) e le riflessioni su cosa voglia dire essere agili e su quali passi dovrebbe intraprendere la comunita' xp italiana per favorire la diffusione dei metodi agili.</li>
	<li>la presentazione di Alessandro Ruzzon sull'uso di Spring in progetti "agili" (!!)</li>
	<li>in generale ho apprezzato la logistica a supporto delle presentazioni, vero punto debole dell'agile day 2006 (troppo rumore perche' non c'era una vera separazione delle diverse track "concorrenti")</li>
</ul>
Cosa non mi e' piaciuto:
<ul>
	<li>la location (troppo difficile da raggiungere)</li>
</ul>

Ah, e ovviamente, aderite anche voi alla campagna anti-if! <a href="http://www.metodiagili.it/campagna-anti-if.html"> <img src="http://www.metodiagili.it/images/aderisci-anti-if-1.gif" alt="Campagna Anti-IF" border="0" height="60" width="120" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2007-11-26 15:54:11</wp:post_date>
		<wp:post_date_gmt>2007-11-26 13:54:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>il-mio-feedback-sullagile-day-2007</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agileday"><![CDATA[AgileDay]]></category>
		<wp:comment>
			<wp:comment_id>294</wp:comment_id>
			<wp:comment_author><![CDATA[teoambrogio.it &raquo; I Metodi Agili e la campagna anti-if]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.teoambrogio.it/?p=177</wp:comment_author_url>
			<wp:comment_author_IP>62.149.130.246</wp:comment_author_IP>
			<wp:comment_date>2007-12-23 00:14:38</wp:comment_date>
			<wp:comment_date_gmt>2007-12-22 22:14:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] anche qualche post sull&#8217;argomento (ritrovandomi perfino in qualche foto  ) e sull&#8217;Agile Day svoltosi a Bologna qualche giorno prima del Javaday, provando inoltre un po&#8217; di invidia nei [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Measuring Lines of Code</title>
		<link>http://xplayer.wordpress.com/2008/01/17/measuring-lines-of-code/</link>
		<pubDate>Thu, 17 Jan 2008 14:23:17 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2008/01/17/measuring-lines-of-code/</guid>
		<description></description>
		<content:encoded><![CDATA[Mi e' piaciuta molto questa frase di Kent Beck da una mail <a href="http://tech.groups.yahoo.com/group/extremeprogramming/message/137842">sulla lista xp americana</a>, sull'uso del numero di linee di codice come metrica di produttivita':
<blockquote><i>Lines of code has many limitations -- it's like measuring a factory based on its consumption of raw materials not on its output.</i></blockquote>
Ricorda un po' <a href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD854.html">quella </a>di Edsger W.Dijkstra
<blockquote><i>Yet people talk about programming as if it were a production process and measure "programmer productivity" in terms of "number of lines of code produced". In so doing they book that number on the wrong side of the ledger: we should always refer to "the number of lines of code spent".</i></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2008-01-17 16:23:17</wp:post_date>
		<wp:post_date_gmt>2008-01-17 14:23:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>measuring-lines-of-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
	</item>
	<item>
		<title>[a-ha! moment] Finalmente ho capito la configurazione di DBCP</title>
		<link>http://xplayer.wordpress.com/2008/02/05/a-ha-moment-finalmente-ho-capito-la-configurazione-di-dbcp/</link>
		<pubDate>Tue, 05 Feb 2008 13:01:13 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[Questo post e' piu' che altro indirizzato a me stesso nel futuro, ma ovviamente se potesse servire ad altri, ora o nel futuro, ne saro' contento.

Ho finalmente capito il significato dei parametri di configurazione di DBCP!
I miei dubbi riguardavano in particolare i parametri <i>minIdle</i>, <i>maxIdle </i>e <i>maxActive</i>.

Le connessioni aperte in un dato istante possono potenzialmente essere comprese tra zero e <i>maxActive</i>.

Quando il n. di connessioni aperte e' compreso tra <i>maxIdle </i>e <i>maxActive</i>, tutte le connessioni ritornate al pool saranno immediatamente chiuse dal pool.

Quando il n. di connessioni aperte e' compreso tra <i>minIdle </i>e <i>maxIdle</i>, tutte le connessioni ritornate al pool saranno soggette all'eventuale evictor (che si attiva con la prop <i>timeBetweenEvictionRunsMillis</i>). Questo significa che quando l'evictor parte, chiudera' tutte le connessioni in eccedenza (rispetto a <i>minIdle</i>), ovviamente secondo le impostazioni dei parametri <i>numTestsPerEvictionRun </i>e <i>minEvictableIdleTimeMillis </i>(quest'ultima in particolare indica quando tempo una connessione 'in eccesso' puo' rimanere idle nel pool prima di essere considerata 'chiudibile' dall'evictor thread).

Quando il n. di connessioni aperte e' compreso tra zero e <i>minIdle</i>, tutte le connessioni ritornate al pool saranno lasciate nel pool. In altre parole non si dovrebbe mai scendere al di sotto di <i>minIdle </i>connessioni aperte verso il db.

Ora, magari questo puo' sembrare scontato a voi, ma a me no!  DBCP ha una documentazione piuttosto fumosa, e in particolare faccio ancora fatica a capire la differenza tra i vari parametri di configurazione... per esempio, cosa si intende per abandonedConnection? E come si distingue da una normale connessione idle?

Comunque intanto mi godo il mio <i>a-ha! moment</i> :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2008-02-05 15:01:13</wp:post_date>
		<wp:post_date_gmt>2008-02-05 13:01:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-ha-moment-finalmente-ho-capito-la-configurazione-di-dbcp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configuration"><![CDATA[configuration]]></category>
		<category domain="post_tag" nicename="connectionpool"><![CDATA[connectionpool]]></category>
		<category domain="post_tag" nicename="dbcp"><![CDATA[dbcp]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
	</item>
	<item>
		<title>[Oracle Tips] Monitorare le connessioni aperte verso il db</title>
		<link>http://xplayer.wordpress.com/2008/02/08/oracle-tip-monitorare-le-connessioni-aperte-verso-il-db/</link>
		<pubDate>Fri, 08 Feb 2008 12:11:04 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[Ogni volta che mi serve tenere d'occhio le connessioni verso un db Oracle mi ricordo vagamente della tabella <i>Vqualcosa</i>, ma il ricordo non e' mai abbastanza nitido... Pertanto mi segno qui alcune query utili, una volta per tutte!

Per contare le connessioni aperte verso il db raggruppate per macchina client
<blockquote><code>    select MACHINE, count(*) from V$SESSION group by MACHINE</code></blockquote>
Per contare solo quelle verso un certo schema
<blockquote><code>    select MACHINE, count(*) from V$SESSION where schemaname = '&lt;NOME DELLO SCHEMA&gt;' group by MACHINE</code></blockquote>
Per contare solo quelle provenienti da certi client
<code></code>
<blockquote><code>    select MACHINE, count(*) from V$SESSION where upper(machine) like '%&lt;NOME DELLA MACCHINA CLIENT&gt;%' group by MACHINE</code></blockquote>
Per contare le connessioni aperte verso il db raggruppate per utente
<code></code>
<blockquote><code>    select osuser, count(*) from V$SESSION group by osuser;</code></blockquote>
Per contare tutte le connessioni aperte (vabbe', questa e' banale!)
<code></code>
<blockquote><code>    select count(*) from V$SESSION;</code></blockquote>
Per vedere anche lo stato della connessione
<code></code>
<blockquote><code>    select count(*), status from V$SESSION group by status;</code></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2008-02-08 14:11:04</wp:post_date>
		<wp:post_date_gmt>2008-02-08 12:11:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oracle-tip-monitorare-le-connessioni-aperte-verso-il-db</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="monitoring"><![CDATA[monitoring]]></category>
		<category domain="post_tag" nicename="oracle"><![CDATA[oracle]]></category>
		<category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Michael Feathers on testing private methods</title>
		<link>http://xplayer.wordpress.com/2008/02/08/michael-feathers-on-testing-private-methods/</link>
		<pubDate>Fri, 08 Feb 2008 16:59:11 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2008/02/08/michael-feathers-on-testing-private-methods/</guid>
		<description></description>
		<content:encoded><![CDATA[Da <a href="http://www.infoq.com/news/2008/01/private-methods-tdd-design">un articolo di InfoQ,</a> la posizione di M.Feathers sul testare i metodi privati:

Michael Feathers suggested last year in <a href="http://michaelfeathers.typepad.com/michael_feathers_blog/2007/09/the-deep-synerg.html">The Deep Synergy Between Testability and Good Design</a> that TDD encourages good design and, conversely, code that is not testable should make us think twice:
<blockquote><i>When I write tests and I have the urge to test a private method, I take it as a hint. The hint tells me that my class is encapsulating so much that it has ceased to be "understandable" by tests through its public interface. I listen to the hint, and factor my design differently. Usually, I end up moving the private method (and possibly some methods around it) to a new class where it can be non-private and accessible to tests.</i></blockquote>
Condivido al 100%!

E interessante anche quello che dice dopo, nel post originale, riguardo alla relazione tra coupling, cohesion e testabilita'.
<blockquote><i>In the end, it all comes down to cohesion and coupling.  If classes are deeply coupled with their neighbors, it is hard to control them in a test or observe them independently.  If a class isn't cohesive, it may have some logic which is not easily exercisable through its public interface.</i>

<i>It seems that reverse is true also.  Classes which are hard to instantiate and use in a test harness are more coupled than they could be, and classes with private methods that you feel the urge to test, invariably have some sort of cohesion problem: they have more than one responsibility.</i></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2008-02-08 18:59:11</wp:post_date>
		<wp:post_date_gmt>2008-02-08 16:59:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>michael-feathers-on-testing-private-methods</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="design"><![CDATA[Design]]></category>
		<category domain="post_tag" nicename="objectoriented"><![CDATA[objectoriented]]></category>
		<category domain="category" nicename="testability"><![CDATA[Testability]]></category>
		<category domain="post_tag" nicename="testability"><![CDATA[Testability]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:comment>
			<wp:comment_id>301</wp:comment_id>
			<wp:comment_author><![CDATA[Uberto Barbini]]></wp:comment_author>
			<wp:comment_author_email>uberto@ubiland.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.linkedin.com/in/uberto</wp:comment_author_url>
			<wp:comment_author_IP>91.53.71.160</wp:comment_author_IP>
			<wp:comment_date>2008-06-01 19:44:37</wp:comment_date>
			<wp:comment_date_gmt>2008-06-01 17:44:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In my experience, you really want to test private methods only when the public ones became so complex that you refactor them in several smaller private ones.
And you could start wishing to test them too.

In these cases usually I smell too many responsabilities. Creating one or two new classes (instead of new private methods) usually helps.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2994788</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Michael Feathers on TDD</title>
		<link>http://xplayer.wordpress.com/2008/06/18/michael-feathers-on-tdd/</link>
		<pubDate>Wed, 18 Jun 2008 14:23:05 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[Una<a href="http://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html"> breve riflessione di Michael Feathers sul TDD</a>, passando per i mock objects per finire sulla necessita' di adottare pratiche che "costringano" a ragionare e riflettere sul nostro codice.

Interessante anche l'excursus sulla storia dei mock objects, nati in Connextra
<blockquote>The story I heard was that it was all started by John Nolan, the CTO of a startup named Connextra. John Nolan, gave his developers a challenge: write OO code with no getters.  Whenever possible, tell another object to do something rather than ask.  In the process of doing this, they noticed that their code became supple and easy to change.</blockquote>
La frase chiave:
<blockquote>We need practices which help us achieve continuous discipline and a continuous state of reflection.  Clean Room and TDD are two practices which, despite their radical differences, force us to think with absolute precision about what we are doing.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2008-06-18 16:23:05</wp:post_date>
		<wp:post_date_gmt>2008-06-18 14:23:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>michael-feathers-on-tdd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning Ruby reimplementing it: attr_writer</title>
		<link>http://xplayer.wordpress.com/?p=224</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here is how attr_writer may be (re)implemented:</p><p> </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2012-02-12 16:50:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>attr_writer</title>
		<link>http://xplayer.wordpress.com/?p=227</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://xplayer.wordpress.com/?p=227"><img src="http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-49-12-pm.png" alt="attr_writer" class="size-full wp-image-226" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[<a href="http://xplayer.wordpress.com/?p=227"><img src="http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-49-12-pm.png" alt="attr_writer" class="size-full wp-image-226" /></a>]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2012-02-12 16:50:35</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-image"><![CDATA[Immagine]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Sul coaching...</title>
		<link>http://xplayer.wordpress.com/2009/03/23/sul-coaching/</link>
		<pubDate>Mon, 23 Mar 2009 10:39:24 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=38</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Caspita, ne è passato di tempo dal mio ultimo post, e tante cose sono cambiate nel frattempo!<br />
La cosa più importante che mi è capitata è che da oramai un anno ho felicemente cambiato lavoro, e grazie a <a href="http://www.sourcesense.com">Sourcesense</a> ho avuto la possibilità di continuare a lavorare in un team agile, dopo la passata esperienza nel team XPlayers di Quinary, iniziata nel 2002.<br />
E' giusto giusto passato un anno da quando lavoro nel <a href="http://www.sourcesense.com/en/agile/">team Orione di Sourcesense</a>, e, dopo diversi progetti di sviluppo e di mentoring, ho avuto l'occasione di fare il coach di una piccola parte del team.<br />
Quest'ultima esperienza mi ha portato anche a fare una riflessione più generale sul coaching di un team agile, riflessioni che vorrei cercare di esprimere in senso più o meno compiuto qui di seguito.</p>
<p><img class="aligncenter size-medium wp-image-45" title="teamwork!" src="http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c4.jpg?w=300" alt="teamwork!" width="300" height="199" /></p>
<p>E' vero, verissimo, come spesso si dice e si sente dire, che ogni membro del team dovrebbe avere a cuore il processo e farsi carico di ricordare a tutti (per primo a sè stesso) le pratiche, i principi e i valori alla base del team stesso, soprattutto in condizioni di pressione o difficoltà. E' quindi ragionevole dire che il team agile *maturo* è un team "senza coach".<br />
Eppure questa conclusione non mi soddisfa, e non mi convince del tutto.<br />
Io penso che qualunque team, dal più "green" al piu' navigato ed esperto, abbia bisogno comunque di un coach. Questo perchè ci sono alcuni "ruoli" che, sebbene possano essere interpretati da molti membri del team (da tutti i membri, in un team maturo), devono avere un interprete primario "designato" dal team.</p>
<p>Faccio un esempio: ognuno di noi sa che in caso di conflitti tra membri del team, o di atti di mancanza di rispetto, dovremmo tutti intervenire per riprendere la persona che ha "alzato i toni", ma il coach, se presente, di certo interverrà per primo.<br />
Stessa cosa se un customer o qualunque persona "esterna" al team di sviluppo cerca di "forzare" il team a lavorare in modi che contrastano con i valori o i principi alla base del team. In tal caso ognuno di noi, indistintamente, dovrebbe intervenire. Ma non si puo' intervenire tutti, "in mucchio". Ci vuole una persona che si faccia carico della cosa e che *per prima* protegga il team da interferenze e pressioni esterne, e per me quella persona è il coach.<br />
So che magari a molti risulterà una metafora un pò lontana, ma pensiamo alle squadre sportive (per esempio di calcio). Lì esiste la figura del capitano, che spesso e volentieri non è neanche la persona più brava della squadra (ad es nel Milan(*) il capitano è Pirlo, non Kaka' o Ronaldinhio), ma che certo interverrà per prima per riprendere un proprio giocatore se si comporta scorrettamente o se non segue gli schemi, o lo difenderà se è vittima di una decisione arbitrale giudicata ingiusta. Ancora, questo non vuol dire che gli altri giocatori non interverrano ugualmente in questi casi, ma di certo il capitano interverrà per primo e tutti i giocatori lo sanno, e quindi da questo punto di vista sono più "tranquilli".</p>
<p>Per me questo è il ruolo primario e insostituibile del coach: è quello che c'è sempre e per primo. Se poi lui non può esserci, di certo gli altri faranno in modo che la sua assenza non si senta.</p>
<p>Tutto questo lungo e verboso discorso per dire che non penso basti chiedere che "ognuno di noi si prenda cura del processo", anche se questo sforzo è condizione assolutamente necessaria al buon funzionamento del team.</p>
<p>P.S. Ricordo che nel team Xplayers in Quinary per un certo periodo il buon <a href="http://thinkingbox.wordpress.com/">Piergiuliano Bossi</a> (a cui devo moltissimo), come esercizio a margine degli studi teorici fatti sul libro bianco di XP di Beck, ci faceva, a turno, essere coach del team, per una iterazione. Questo ci serviva per capire che ruolo avesse davvero il coach.</p>
<p>(*) Nota: non sono milanista, è solo per fare un esempio.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2009-03-23 12:39:24</wp:post_date>
		<wp:post_date_gmt>2009-03-23 10:39:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sul-coaching</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agile"><![CDATA[Agile]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>304</wp:comment_id>
			<wp:comment_author><![CDATA[Giorgio]]></wp:comment_author>
			<wp:comment_author_email>giorgio.vespucci@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.37.217.123</wp:comment_author_IP>
			<wp:comment_date>2009-04-15 22:10:46</wp:comment_date>
			<wp:comment_date_gmt>2009-04-15 20:10:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Un giorno anch'io lavorero in un team così, me lo prometto... :')]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Come generare il report HTML dei test eseguiti con Jmeter</title>
		<link>http://xplayer.wordpress.com/2009/07/06/come-generare-il-report-html-dei-test-eseguiti-con-jmeter/</link>
		<pubDate>Mon, 06 Jul 2009 12:03:08 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Problema</strong>: <em>"Ho problemi con il report html dei test jmeter generato dalla trasformazione XSL indicata dalla documentazione di Jmeter (versione 2.3.4). Infatti nel report html si hanno due comportamenti anomali:</em>
<ul>
	<li><em>la prima riga è sempre raddoppiata, ovvero presente due volte (e vabbè, passi)</em></li>
	<li><em>le colonne che indicano i tempi massimi e minimi non sono valorizzate (NaN)"</em></li>
</ul>
<strong>Soluzione</strong>: <em>"Il problema è nella versione di Xalan inclusa di default nel JRE 1.5 e 1.6 di java. Si deve usare Xalan-J 2.4.1"</em>

<strong>Descrizione più dettagliata</strong>:

Tutto è nato con dei test di carico e performance che stiamo eseguendo in questo periodo.
Jmeter, di cui usiamo la versione 2.3.4, esporta il report del test plan in formato XML (o CSV se specificato). Per convertirlo in un HTML più comodamente fruibile si deve effettuare una trasformazione XSL, e per fortuna Jmeter mette a disposizione degli stylesheet apposta per questo (si trovano nel folder /extras dell'installazione di Jmeter).

Detto, fatto. Il comando che eseguo dovrebbe essere (ad esempio)
<pre style="padding-left:30px;">java org.apache.xalan.xslt.Process
  -IN jmeterResults.xml
  -XSL ~/work/jakarta-jmeter-2.3.4/extras/jmeter-results-report_21.xsl
  -OUT jmeterResults.html</pre>

Purtroppo questa trasformazione non funziona, o meglio, produce un HTML incompleto (vedi sezione "Problema").

Dopo diversi tentativi, ho scoperto la soluzione, grazie ad un commento a <a href="http://jlorenzen.blogspot.com/2008/03/automated-performance-tests-using.html">questo post</a>: usando la <a href="http://mirrors.ibiblio.org/pub/mirrors/maven2/xalan/xalan/2.4.1/">versione 2.4.1 di Xalan-J</a> l'HTML prodotto è completo.

Per la cronaca, per lanciare la trasformazione XSL a linea di comando specificando una propria versione di Xalan, basta fare così
<pre style="padding-left:30px;">java
<strong>  -cp xalan-2.4.1.jar</strong> org.apache.xalan.xslt.Process
  -IN log.jtl
  -XSL ../extras/jmeter-results-report_21.xsl
  -OUT foo.html</pre>
<span style="font-family:Georgia, 'Times New Roman', 'Bitstream Charter', Times, 0;font-size:small;"><span style="line-height:19px;white-space:normal;">
</span></span>
<span style="font-family:Georgia, 'Times New Roman', 'Bitstream Charter', Times, 0;line-height:19px;white-space:normal;font-size:13px;">E in ant (cosa che interessava me in particolare, perchè lanciavamo jmeter da ant)</span>
<pre style="padding-left:30px;">&lt;xslt
  in="${scenario.target.path}/scenario-result.xml"
  out="${scenario.target.path}/AggregateReport.html"
  style="${jmeter.home}/extras/jmeter-results-report_21.xsl"
<strong>  classpath="${basedir}/../xalan-2.4.1.jar"</strong> /&gt;</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[Come generare il report HTML dei test eseguiti con Jmeter]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2009-07-06 14:03:08</wp:post_date>
		<wp:post_date_gmt>2009-07-06 12:03:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>come-generare-il-report-html-dei-test-eseguiti-con-jmeter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jmeter"><![CDATA[Jmeter]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>305</wp:comment_id>
			<wp:comment_author><![CDATA[Come generare il report HTML dei test eseguiti con Jmeter « XPlayer]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.webso.it/2009/07/06/come-generare-il-report-html-dei-test-eseguiti-con-jmeter-%c2%ab-xplayer/</wp:comment_author_url>
			<wp:comment_author_IP>95.110.192.253</wp:comment_author_IP>
			<wp:comment_date>2009-07-08 07:04:57</wp:comment_date>
			<wp:comment_date_gmt>2009-07-08 05:04:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] fonte: Come generare il report HTML dei test eseguiti con Jmeter « XPlayer  Articoli correlati: ASP.NET Report Maker 3.0 | Software Windows | [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>350</wp:comment_id>
			<wp:comment_author><![CDATA[Rajiv]]></wp:comment_author>
			<wp:comment_author_email>rajivkumarnandvani@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://rajivkumarnandvani.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>27.97.17.172</wp:comment_author_IP>
			<wp:comment_date>2010-12-05 06:34:25</wp:comment_date>
			<wp:comment_date_gmt>2010-12-05 04:34:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi can you publish this post in english.
I t would be great help for me
thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1291523666]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1291523666.7848";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Come fare integration test su un plugin per Jira 3.13.4</title>
		<link>http://xplayer.wordpress.com/2009/07/08/come-fare-integration-test-su-un-plugin-per-jira-3-13-4/</link>
		<pubDate>Wed, 08 Jul 2009 13:08:00 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[Quando si tratta di voler scrivere test di integrazione per il vostro meraviglioso plugin per Jira 3.13.4 (l'ultima versione di Jira, in attesa che la 4.0 esca dalla beta), ci si imbatte in una serie di problemi.
Dopo qualche indagine, sono riuscito a risolverli tutti, e mi accingo a condividere la soluzione adottata, nella speranza che possa servire a qualcun altro (anche a me stesso tra qualche mese...).

Premetto che stiamo sviluppato il plugin usando maven2, che per questo genere di cose è davvero molto comodo.
Se avete qualche dubbio, ecco due riferimenti:
<ul>
	<li><a title="How to Build an Atlassian Plugin" href="http://confluence.atlassian.com/display/DEVNET/How+to+Build+an+Atlassian+Plugin">http://confluence.atlassian.com/display/DEVNET/How+to+Build+an+Atlassian+Plugin</a></li>
	<li><a title="Testing your plugin" href="//confluence.atlassian.com/display/DEVNET/Testing+your+plugin">http://confluence.atlassian.com/display/DEVNET/Testing+your+plugin</a></li>
</ul>
Il pom.xml generato da maven usando l'archetipo per plugin di Jira contiene una sezione "properties" che, all'inizio, si presenta così:
<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;">&lt;properties&gt;
&lt;atlassian.plugin.key&gt;
com.sourcesense.jira.plugin.MyWonderfulPluginToSaveTheWorld
&lt;/atlassian.plugin.key&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;!-- JIRA version --&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;atlassian.product.version&gt;3.13&lt;/atlassian.product.version&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;!-- JIRA functional test library version --&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;atlassian.product.test-lib.version&gt;3.13&lt;/atlassian.product.test-lib.version&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;!-- JIRA data version --&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;atlassian.product.data.version&gt;3.13&lt;/atlassian.product.data.version&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;">&lt;/properties&gt;</span>

Qui trovate una <a href="http://confluence.atlassian.com/display/DEVNET/Testing+your+plugin#Testingyourplugin-SystemProperties">descrizione di queste properties</a>, assieme ai loro valori di default.

Ecco un estratto:
<p style="padding-left:20px;"><em><strong>"atlassian.product.version" </strong>- version of the Atlassian product to compile and test against.</em></p>
<p style="padding-left:20px;"><em><strong>"atlassian.product.data.version"</strong> - version of the test resource bundle that contains the basic Atlassian product configuration data for the integration test environment. These versions mimic the actual Atlassian product versions. However we might only modify and release the relevant projects for the reasons of non-backwards compatibility of the new versions of Atlassian products. Therefore not every version of Atlassian products will have a corresponding version of the resource bundle.</em></p>
La property <strong>"atlassian.product.test-lib.version"</strong> non è documentata, e per capire il suo significato dovete chiedere a Google, che vi rispondera' con <a href="http://www.customware.net/repository/display/ATLASSIAN/Integration+Testing+of+Confluence+Plugins">questa utile pagina</a>.
<p style="padding-left:20px;"><em><strong>"atlassian.product.test-lib.version"</strong> - The version of the testing library to use, as a general recommendation you should at least use version 2.0 or higher as it exposes more of the page's content and provides quite a few extra helper classes to aid in your testing.</em></p>
Benissimo, quindi io che sto facendo un plugin per la versione 3.13.4 di Jira, sostituisco questo valore nelle tre properties del POM
<pre style="padding-left:20px;">&lt;properties&gt;
 ...
    &lt;atlassian.product.version&gt;3.13.4&lt;/atlassian.product.version&gt;
    &lt;atlassian.product.test-lib.version&gt;3.13.4&lt;/atlassian.product.test-lib.version&gt;
    &lt;atlassian.product.data.version&gt;3.13.4&lt;/atlassian.product.data.version&gt;
 &lt;/properties&gt;</pre>
Detto, fatto.
Mi manca solo di creare il mio primo test di integrazione, rigorosamente nel package che inizia con "it".
<pre> package it.com.sourcesense.jira.plugin;

 import com.atlassian.jira.webtests.JIRAWebTest;

 public class JiraTest extends JIRAWebTest {

    public JiraTest(String name) {
      super(name);
    }

    public void setUp() {
      super.setUp();
      restoreDataWithLicense("JiraDataForTest.xml", ENTERPRISE_KEY);
   }

   public void testVerySimple() throws Exception {
      assertTextPresent("This JIRA site is for demonstration purposes only");
   }
 }</pre>
E copiare il dump esportato da Jira per avere qualche dato di test (JiraDataForTest.xml) nel folder src/test/xml/ del progetto del plugin.

A questo punto non mi resta che lanciare il seguente comando nella home della progetto
<pre style="padding-left:20px;">mvn integration-test</pre>
e aspettare con pazienza che maven scarichi quel Terabyte di jar di cui dichiara di aver bisogno.

Primo problema: la console di mvn mi dice
<pre> [INFO] [jar:jar]
 [INFO] Building jar:
        /private/tmp/HelloWorldPlugin/target/MyWonderfulPluginToSaveTheWorld-1.0-SNAPSHOT.jar
 [INFO] [antrun:run {execution: generate-integration-test-config}]
 [INFO] Executing tasks
 [touch] Creating
  /private/tmp/MyWonderfulPluginToSaveTheWorld/target/test-classes/localtest.properties
 [propertyfile] Updating property file:
  /private/tmp/MyWonderfulPluginToSaveTheWorld/target/test-classes/localtest.properties
 [INFO] Executed tasks
 [INFO] [antrun:run {execution: pre-integration-test-user-ant-tasks}]
 [INFO] Executing tasks
 [INFO] Executed tasks
 [INFO] [atlassian-test-harness:start-fisheye {execution: start-fisheye}]
 [INFO] Skipping fisheye; startService is set to false
 [INFO] [atlassian-test-harness:start-confluence {execution: start-confluence}]
 [INFO] Skipping confluence; startService is set to false
 [INFO] [atlassian-test-harness:start-jira {execution: start-jira}]
 [INFO] Output log is set to /private/tmp/MyWonderfulPluginToSaveTheWorld/target/jira/output.log</pre>
E si blocca lì.
Vado a vedere il log segnalato nell'ultima riga della console, e scopro una pletora di eccezioni:
<pre>2009-07-07 16:11:19,568 main ERROR
[com.atlassian.license.LicenseManager] Exception getting license: java.lang.RuntimeException: contactLicense was null
 at org.picocontainer.defaults.DecoratingComponentAdapter.getComponentInstance(DecoratingComponentAdapter.java:42)
 at org.picocontainer.defaults.SynchronizedComponentAdapter.getComponentInstance(SynchronizedComponentAdapter.java:35)
 ...</pre>
Indago, guardo su Google, niente.
Provo allora a sostituire 3.13.4 con 3.13.2 nelle tre properties del POM
<pre style="padding-left:20px;">&lt;properties&gt;
    ...
   &lt;atlassian.product.version&gt;3.13.2&lt;/atlassian.product.version&gt;
   &lt;atlassian.product.test-lib.version&gt;3.13.2&lt;/atlassian.product.test-lib.version&gt;
   &lt;atlassian.product.data.version&gt;3.13.2&lt;/atlassian.product.data.version&gt;
&lt;/properties&gt;</pre>
E rilancio "mvn integration-test".
Stavolta l'errore è più chiaro: fallisce il ripristino del dump JiraDataForTest.xml nell'istanza di Jira 3.13.2 che viene avviata da maven, perchè la versione del dump è stata fatta con la 3.13.4, una versione successiva alla 3.13.2, e quindi Jira si rifiuta da caricarla. Eccheccavolo.

Vi risparmio tutte le combinazioni di numeri di versione che ho provato a mettere nel POM, senza successo, e vado dritto verso la soluzione.
Ecco il pom.xml che funziona
<pre style="padding-left:20px;">&lt;properties&gt;
 ...
 &lt;atlassian.product.version&gt;3.13.2&lt;/atlassian.product.version&gt;
 &lt;atlassian.product.test-lib.version&gt;3.13.4&lt;/atlassian.product.test-lib.version&gt;
 &lt;atlassian.product.data.version&gt;3.13.2&lt;/atlassian.product.data.version&gt;
 &lt;/properties&gt;</pre>
L'altra cosa da fare è modificare i dump di Jira che vorrete usare per i vostri test, in modo da far credere a Jira che sta importando una versione compatibile del dump.
Per fare questo dovete:

1. Aprire il dump xml di Jira che usate per i test (nel nostro caso JiraDataForTest.xml)

2. Cercare l'occorrenza di questa property
<pre style="padding-left:20px;">&lt;OSPropertyEntry id="12345"
   entityName="jira.properties"
   entityId="1"
   propertyKey="jira.version.patched"
   type="5"/&gt;</pre>
<p style="padding-left:20px;">Per essere sicuri basta che cerchiate la parola "jira.version.patched"</p>
3. Prendere nota dell'id di questa propery (es 12345) e cercare l'occorrenza di una OSPropertyString con lo stesso id
<pre style="padding-left:20px;">&lt;OSPropertyString id="12345" value="354"/&gt;</pre>
<p style="padding-left:20px;">Ecco, quel valore (354) rappresenta la build version di Jira, che per la 3.13.4 è proprio 354.</p>
4. Sostituire il valore 354 con 335, che è la build versione di Jira 3.13.2 e salvare l'xml

5. Rilanciare il test.

Tutto dovrebbe filare liscio ora...
<pre> $ mvn integration-test
 ...
 ...
 [INFO] [jar:jar]
 [INFO] Building jar:
    /Users/pietrodibello/Documents/workspace/MyWonderfulProjectToSaveTheWorld/MyWonderfulPluginToSaveTheWorld/
    target/MyWonderfulPluginToSaveTheWorld-1.0-SNAPSHOT.jar
 [INFO] [antrun:run {execution: generate-integration-test-config}]
 [INFO] Executing tasks
 [propertyfile] Updating property file:
   /Users/pietrodibello/Documents/workspace/MyWonderfulProjectToSaveTheWorld/MyWonderfulPluginToSaveTheWorld/
   target/test-classes/localtest.properties
 [INFO] Executed tasks
 [INFO] [antrun:run {execution: pre-integration-test-user-ant-tasks}]
 [INFO] Executing tasks
 [INFO] Executed tasks
 [INFO] [atlassian-test-harness:start-fisheye {execution: start-fisheye}]
 [INFO] Skipping fisheye; startService is set to false
 [INFO] [atlassian-test-harness:start-confluence {execution: start-confluence}]
 [INFO] Skipping confluence; startService is set to false
 [INFO] [atlassian-test-harness:start-jira {execution: start-jira}]
 [INFO] Output log is set to
   /Users/pietrodibello/Documents/workspace/MyWonderfulProjectToSaveTheWorld/MyWonderfulPluginToSaveTheWorld/target/jira/output.log
 [INFO] Finished with jira goal
 [INFO] [atlassian-test-harness:start-bamboo {execution: start-bamboo}]
 [INFO] Skipping bamboo; startService is set to false
 [INFO] [surefire:test {execution: acceptance_tests}]
 [INFO] Surefire report directory:
   /Users/pietrodibello/Documents/workspace/MyWonderfulProjectToSaveTheWorld/MyWonderfulPluginToSaveTheWorld/target/surefire-reports

 -------------------------------------------------------
 T E S T S
 -------------------------------------------------------
 Running it.com.sourcesense.jira.plugin.JiraTest
 .
 . Started it.com.sourcesense.jira.plugin.JiraTest.test. Wed Jul 08 14:30:44 CEST 2009
 going to page secure/admin/XmlRestore!default.jspa
 Asserting text present: Your project has been successfully imported
 Asserting text present: This JIRA site is for demonstration purposes only
 .
 . Finished it.com.sourcesense.jira.plugin.JiraTest.test. Wed Jul 08 14:30:54 CEST 2009
 . The test ran in 10.542 seconds
 . The test suite has been running for 10.536 seconds
 . Max Mem : 66650112 Total Mem : 2727936 Free Mem : 268968
 . ______________________________
 Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.045 sec

 Results :

 Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

 [INFO] ------------------------------------------------------------------------
 [INFO] BUILD SUCCESSFUL
 [INFO] ------------------------------------------------------------------------
 [INFO] Total time: 44 seconds
 [INFO] Finished at: Wed Jul 08 14:30:55 CEST 2009
 [INFO] Final Memory: 32M/254M
 [INFO] ------------------------------------------------------------------------</pre>
Evviva, barra verde!!]]></content:encoded>
		<excerpt:encoded><![CDATA[Tutto quello che avreste osato chiedere su come cavolo scrivere un integration test per Jira 3.13.4 ma che non sapevate a chi chiedere... ]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2009-07-08 15:08:00</wp:post_date>
		<wp:post_date_gmt>2009-07-08 13:08:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>come-fare-integration-test-su-un-plugin-per-jira-3-13-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jira"><![CDATA[Jira]]></category>
		<category domain="post_tag" nicename="jira"><![CDATA[Jira]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby: how to spot slow tests in your test suite</title>
		<link>http://xplayer.wordpress.com/2009/10/02/ruby-how-to-spot-slow-tests-in-your-test-suite/</link>
		<pubDate>Thu, 01 Oct 2009 22:49:51 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[This is actually my first post in english and also my first post on Ruby/Rails stuff. Twice as hard!

Anyway, we're working on a Rails project, and we're experiencing the classical debate in all Rails project (at least the ones with tests!): why our test suite is so damn slow?!
Ok, we know that ActiveRecord is one of the key components in Rails and is at the root of its philosophy of web development. And along with ActiveRecord comes the strong tight between the model and the database. So each test, even the unit tests, will touch the database (ok, technically speaking they cannot be defined unit-tests, I know. Sorry Michael Feathers for <a title="What is a unit test" href="http://www.artima.com/weblogs/viewpost.jsp?thread=126923">betraying your definition</a>).
The very first consequence of this approach is that as your test suite grows with your project, it will become slower and slower.

Let's take our current project. This is our actual test suite composition:
<ul>
	<li> Unit: 317 tests, 803 assertions</li>
	<li> Functional: 245 tests, 686 assertions</li>
	<li> Integration: 50 tests, 218 assertions</li>
</ul>
So we have<strong> 612 test methods</strong>, for a resulting number of <strong>1707 assertions</strong>.
As a side note, our code-to-test ratio is 1:2.3, that is, for each line of production code we have 2.3 lines of tests.
The suite takes about <strong>115 seconds to execute</strong> (on my MacBook Pro Core 2 Duo).

So, what can we do to speed up our tests and have a more "feedback-friendly" test suite?
The first step toward the solution of this issue is to have some metrics to reflect on, and so I developed this little ruby module to collect test duration times.
This is how you can use it too:

First, create a file called <strong>"test_time_tracking.rb"</strong> in the test folder of your Rails project. This should be its content:
<pre style='color:#000020;background:#f6f8ff;'><span style='color:#200080;font-weight:bold;'>module</span> TestTimeTracking
    <span style='color:#200080;font-weight:bold;'>class</span> ActiveSupport::TestCase
      <span style='color:#200080;font-weight:bold;'>def</span> self<span style='color:#308080;'>.</span>should_track_timing?
        <span style='color:#200080;font-weight:bold;'>not</span><span style='color:#308080;'>(</span>ENV<span style='color:#308080;'>[</span><span style='color:#1060b6;'>"tracking"</span><span style='color:#308080;'>]</span><span style='color:#308080;'>.</span><span style='color:#200080;font-weight:bold;'>nil</span>?<span style='color:#308080;'>)</span>
      <span style='color:#200080;font-weight:bold;'>end</span>

      setup :mark_test_start_time <span style='color:#200080;font-weight:bold;'>if</span> should_track_timing?
      teardown :record_test_duration <span style='color:#200080;font-weight:bold;'>if</span> should_track_timing?

      <span style='color:#200080;font-weight:bold;'>def</span> mark_test_start_time
        @start_time <span style='color:#308080;'>=</span> Time<span style='color:#308080;'>.</span>now
      <span style='color:#200080;font-weight:bold;'>end</span>

      <span style='color:#200080;font-weight:bold;'>def</span> record_test_duration
        File<span style='color:#308080;'>.</span><span style='color:#400000;'>open</span><span style='color:#308080;'>(</span><span style='color:#1060b6;'>"/tmp/test_metrics.csv"</span>, <span style='color:#1060b6;'>"a"</span><span style='color:#308080;'>)</span> <span style='color:#200080;font-weight:bold;'>do</span> |file|
          file<span style='color:#308080;'>.</span><span style='color:#400000;'>puts</span> <span style='color:#1060b6;'>"#{name().gsub(/,/, '_')},#{Time.now - @start_time}"</span>
        <span style='color:#200080;font-weight:bold;'>end</span>
      <span style='color:#200080;font-weight:bold;'>end</span>

    <span style='color:#200080;font-weight:bold;'>end</span>
<span style='color:#200080;font-weight:bold;'>end</span>
</pre>
Then, edit your <strong>"test_helper.rb"</strong> (again, under the test folder), to require and include the previous module.
E.g.

*test_helper.rb*
<pre style='color:#000020;background:#f6f8ff;'>ENV<span style='color:#308080;'>[</span><span style='color:#1060b6;'>"RAILS_ENV"</span><span style='color:#308080;'>]</span> <span style='color:#308080;'>=</span> <span style='color:#1060b6;'>"test"</span>
  <span style='color:#400000;'>require</span> File<span style='color:#308080;'>.</span>expand_path<span style='color:#308080;'>(</span>File<span style='color:#308080;'>.</span>dirname<span style='color:#308080;'>(</span>__FILE__<span style='color:#308080;'>)</span> <span style='color:#308080;'>+</span> <span style='color:#1060b6;'>"/../config/environment"</span><span style='color:#308080;'>)</span>
  <span style='color:#400000;'>require</span> <span style='color:#1060b6;'>"test_time_tracking"</span>

  <span style='color:#200080;font-weight:bold;'>class</span> ActiveSupport::TestCase
    include TestTimeTracking
    <span style='color:#308080;'>.</span><span style='color:#308080;'>.</span><span style='color:#308080;'>.</span>
</pre>
then, all you have to do is executing your rake task with the "tracking" option set, e.g.
<code>tracking=on rake</code>

At the end of the test suite execution you'll find a CSV file (test_metrics.csv) in your /tmp folder.
This file contains a line for each test method executed, along with its duration in seconds.
I use to upload this file in google docs, and then apply a formula to sort out the methods from the slowest to the fastest.
A good formula is the following:
<code>=Sort(A2:B612, B2:B612, FALSE)</code>

The main limitation in the current implementation of this module is that every time the suite is executed with rake, the new time metrics collected are appended at the end of the previous file (if it exists), so each time you should remember to move the file to a different location. I'm working on this issue, so I'm expecting to find a better solution. Stay tuned!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date>2009-10-02 00:49:51</wp:post_date>
		<wp:post_date_gmt>2009-10-01 22:49:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-how-to-spot-slow-tests-in-your-test-suite</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>312</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan]]></wp:comment_author>
			<wp:comment_author_email>nesquena@uci.edu</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.211.204.65</wp:comment_author_IP>
			<wp:comment_date>2009-10-03 01:37:18</wp:comment_date>
			<wp:comment_date_gmt>2009-10-02 23:37:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like you should check out:

http://github.com/timocratic/test_benchmark

I have been using this to measure test speeds for a while and it has been invaluable.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>313</wp:comment_id>
			<wp:comment_author><![CDATA[stoner]]></wp:comment_author>
			<wp:comment_author_email>pierodibello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xplayer.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.33.103.206</wp:comment_author_IP>
			<wp:comment_date>2009-10-03 09:59:10</wp:comment_date>
			<wp:comment_date_gmt>2009-10-03 07:59:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@ Nathan: thanks for the reference, I'll give it a try!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>544375</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>311</wp:comment_id>
			<wp:comment_author><![CDATA[claudio]]></wp:comment_author>
			<wp:comment_author_email>cacciaresi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.19.180.183</wp:comment_author_IP>
			<wp:comment_date>2009-10-02 14:39:34</wp:comment_date>
			<wp:comment_date_gmt>2009-10-02 12:39:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice! thanks a lot!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>405</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander]]></wp:comment_author>
			<wp:comment_author_email>alex_grom@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://alexsorokin.ru</wp:comment_author_url>
			<wp:comment_author_IP>85.235.191.82</wp:comment_author_IP>
			<wp:comment_date>2011-12-02 16:05:30</wp:comment_date>
			<wp:comment_date_gmt>2011-12-02 14:05:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very useful piece of code! Together with Excel it helped me to optimize tests running time.
Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1322834731]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1322834731.6364";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Think different about mock objects!</title>
		<link>http://xplayer.wordpress.com/2009/11/04/think-different-about-mock-objects/</link>
		<pubDate>Tue, 03 Nov 2009 23:02:57 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[<div>Recently, after the post on mock objects by Uncle Bob (<a href="http://blog.objectmentor.com/articles/2009/10/28/manual-mocking-resisting-the-invasion-of-dots-and-parentheses" target="_blank">"Manual Mocking: Resisting the Invasion of Dots and Parentheses"</a>), a rather long discussion thread grown in the extreme programming italian newsgroup (starting <a href="http://it.groups.yahoo.com/group/extremeprogramming-it/message/7224" target="_blank">here</a>, but careful, it's in italian, sorry!).</div>
<div>This led me to think more deeply about my experience with mock objects, and I'd like to share my point of view here, as it's quite different (or so it seems to me) from the common opinions on this important topic.</div>
<p>
<div>I've always followed the so-called (as Giuliano would say, isn't it <a href="http://thinkingbox.wordpress.com/" target="_blank">Giuliano</a>? :-) "English School" of mock objects, the one coming from the pioneering works of <a href="http://www.planningcards.com/iterex/blog.html" target="_blank">Tim Mackinnon</a>,<a href="http://www.m3p.co.uk/blog/" target="_blank"> Steve Freeman</a> and <a href="http://www.natpryce.com/" target="_blank">Nat Pryce</a>, the real fathers of mock objects.</div>
<p>
<div>And I've always carefully followed their advice, first through their *epic* paper  <strong>"Mock Roles, not Objects"</strong> (<a href="http://www.jmock.org/oopsla2004.pdf" target="_blank">http://www.jmock.org/oopsla2004.pdf</a>) - IMHO the best paper on mock objects and on object oriented programming with mocks - then through their terrific posts on the blog <a href="http://www.mockobjects.com/" target="_blank">www.mockobjects.com</a>, and finally, through their first (and brand new) book, <a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627" target="_blank">"Growing Object-Oriented Software, Guided by Tests"</a>.</div>
<p>
<div>One thing I learn is that <strong>mock objects are a design tool</strong>, while many people see it only as a technique for speeding up unit tests.</div>
<div>And in this context mock objects are a key tool to support your TDD process, especially in test-driving your domain model, where you follow a process similar to traditional top-down development, in which you start from the highest level of abstraction and then proceed, layer by layer, to reach the core of the domain and then move again towards the boundary of the system, towards the "services" (you can find many similarities in <a href="http://alistair.cockburn.us/Hexagonal+architecture" target="_blank">Cockburn's approach to Hexagonal Architecture</a>).</div>
<p>
<div>Then, when you reach the domain boundary, you should stop using mocks.</div>
<div>Mock objects are useful to TDDing the thin adapter layers to your services (that is, third-party libraries or external components (e.g. a database, a JMS queue, ...). But then, the actual adapters will be tested with integration testing.</div>
<p>
<div>Why?</div>
<p style="padding-left:30px;">Because you should use mock objects as far as you can apply TDD, whereas you can design and *discover* interfaces (and roles), and assign responsibility. On the other hand, in front of a third-party library you cannot follow this process, since the code is not under your control, and you cannot modify it.</p>
<p>
<div style="padding-left:30px;">Because if you use mock objects with third-party libraries (two concrete examples taken from our recent projects: isolating our tests from the database in a Rails app, or in a java app using Hibernate ORM), you'll write tests that *guess* the library behaviour, and your guesses may be far away from the actual behaviour.</div>
<div style="padding-left:30px;">Raise your hands if you never burnt your fingers with this kind of test with mocks, where maybe you *thought* you had a save() method to return an A object while in fact it returned B object! :)</div>
<p>
<div style="padding-left:30px;">And finally, because this kind of tests with mocks end up to be long, unreadable and fragile (an "invasion of dots and parentheses" reported by Uncle Bob in his post), full of mocks and mock expectations. And, hey, you cannot refactor them, since you don't own the third-party code!</div>
<BR>
To verify the correct integration with libraries or external components, which are out of you domain, as well as with integration tests, you may use <a href="http://xunitpatterns.com/Fake%20Object.html" target="_blank">fake</a>s or <a href="http://xunitpatterns.com/Test%20Stub.html" target="_blank">stub</a>s (and, by the way, the example in the Uncle Bob's post is actually a stub, not a "hand-rolled mock").
<p>
<div>So, I'll repeat myself, following this "mocks as a design tool" approach, you'll <a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html" target="_blank">mock only types you own</a>.</div>
<p>
<div>Some useful references to study this topic in depth (you'll be OK even if you read just the first 2-3 links :-)</div>
<div>
<ul>
	<li><a href="http://www.jmock.org/oopsla2004.pdf" target="_blank">http://www.jmock.org/oopsla2004.pdf</a> (I'm quoting again this paper, because it's a *really* good starting point to understand this approch to mock objects)</li>
	<li><a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html" target="_blank">http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html</a> (if you like to deepen the "Don't mock third-party libraries" and "Don't mock value objects" topics)</li>
	<li><a href="http://www.mockobjects.com/2006/10/tell-dont-ask-and-mock-objects.html" target="_blank">http://www.mockobjects.com/2006/10/tell-dont-ask-and-mock-objects.html</a></li>
	<li><a href="http://www.mockobjects.com/2006/10/jmock-listening-to-opinionated.html" target="_blank">http://www.mockobjects.com/2006/10/jmock-listening-to-opinionated.html</a></li>
	<li><a href="http://www.mockobjects.com/2006/09/like-fire-drill.html" target="_blank">http://www.mockobjects.com/2006/09/like-fire-drill.html</a></li>
	<li><a href="http://www.mockobjects.com/2007/04/test-smell-bloated-constructor.html" target="_blank">http://www.mockobjects.com/2007/04/test-smell-bloated-constructor.html</a></li>
	<li><a href="http://www.mockobjects.com/2007/04/test-smell-i-need-to-mock-object-i-cant.html" target="_blank">http://www.mockobjects.com/2007/04/test-smell-i-need-to-mock-object-i-cant.html</a></li>
	<li><a href="http://www.mockobjects.com/files/evolving_an_edsl.ooplsa2006.pdf" target="_blank">http://www.mockobjects.com/files/evolving_an_edsl.ooplsa2006.pdf</a> (yet another paper, very good)</li>
	<li> and if you want to know more about the history of mock objects: <a href="http://www.mockobjects.com/2009/09/brief-history-of-mock-objects.html" target="_blank">http://www.mockobjects.com/2009/09/brief-history-of-mock-objects.html</a></li>
</ul>
I hope I give you some useful feedback on this topic!

</div>
<div>And, by the way, feedbacks are warmly welcome!</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[Another (different) point of view on mock object, too much times used merely as a testing tool. They are more then that, and knowing how to use it in a better way may improve your code too!]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2009-11-04 01:02:57</wp:post_date>
		<wp:post_date_gmt>2009-11-03 23:02:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>think-different-about-mock-objects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="design"><![CDATA[Design]]></category>
		<category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ThinkCode.TV goes live!</title>
		<link>http://xplayer.wordpress.com/2009/11/10/thinkcode-tv-goes-live/</link>
		<pubDate>Mon, 09 Nov 2009 22:18:40 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=122</guid>
		<description></description>
		<content:encoded><![CDATA[An advertisement for my friend and mentor Piergiuliano Bossi: his long-waited <a href="http://it.thinkcode.tv/">ThinkCode.TV</a> goes live!

<strong>ThinkCode.TV </strong>is a website specializes in the delivery of high quality commercial screencasts about software development, at a really cheap prices.

The first 5 videos are now online (the actual language is italian, but english content is planned for the following months):
<ul>
	<li>The first two lessions on <strong>Python</strong>, by Marco Beri</li>
	<li>A screencast on <strong>MacRuby</strong>, by Renzo Borgatti</li>
	<li>The first two lessions on <strong>TDD</strong>, by Piergiuliano Bossi.</li>
</ul>
Selling all these high-quality screencasts at about <strong>5 euro each </strong>makes them *really* appetible.]]></content:encoded>
		<excerpt:encoded><![CDATA[ThinkCode.TV, a website specializes in the delivery of high quality commercial screencasts about software development, at a really cheap prices, goes live!]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2009-11-10 00:18:40</wp:post_date>
		<wp:post_date_gmt>2009-11-09 22:18:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thinkcode-tv-goes-live</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[thinkcode-tv-is-now-live]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>One (and a half) useful thing to know when using DeepTest gem with MySQL</title>
		<link>http://xplayer.wordpress.com/2010/01/18/one-and-a-half-useful-thing-to-know-when-using-deeptest-gem-with-mysql/</link>
		<pubDate>Sun, 17 Jan 2010 23:22:52 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=127</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://github.com/qxjit/deep-test">DeepTest</a> currently won't work if you've configured MySQL with no password (in other words, if you are able to connect to mysql with a simple "mysql -u root").
To fix this, you have to patch DeepTest (I know, asap I'll go through the whole process to propose the patch to the original project leader).
Actually, you have to comment out a line, in the <em>DeepTest:Database:MysqlSetupListener#grant_privileges </em>method:
<pre style="background:#f1f0f0 none repeat scroll 0 0;color:#000000;padding-left:30px;"><span style="color:#806030;">.</span><span style="color:#806030;">.</span><span style="color:#806030;">.</span>
<span style="color:#400000;font-weight:bold;">def</span> grant_privileges<span style="color:#806030;">(</span>connection<span style="color:#806030;">)</span>
sql <span style="color:#806030;">=</span> %<span style="color:#806030;">{</span>grant all on <span style="color:#c34e00;">#{worker_database}.*</span>
to %s@<span style="color:#e60000;">'localhost'</span>;<span style="color:#806030;">}</span> % <span style="color:#806030;">[</span>
connection<span style="color:#806030;">.</span>quote<span style="color:#806030;">(</span>worker_database_config<span style="color:#806030;">[</span>:username<span style="color:#806030;">]</span><span style="color:#806030;">)</span><span style="color:#c34e00;"># ,</span>
<span style="color:#c34e00;"># connection.quote(worker_database_config[:password])  &lt;-- mysql with no password won't work</span>
<span style="color:#806030;">]</span>
connection<span style="color:#806030;">.</span>execute sql
<span style="color:#400000;font-weight:bold;">end</span>
<span style="color:#806030;">.</span><span style="color:#806030;">.</span><span style="color:#806030;">.</span>
</pre>
Another tip (the "half" in the blog post title):
Don't forget to edit the "pattern" option in your DeepTest rake task, to be able to grab all the testcases you want.
In my case, I want to skip a whole folder containing selenium tests, so I have to write my Deep Test rake file this way:
(in <em>/lib/tasks/test.rake</em>)
<pre style="background:#f1f0f0 none repeat scroll 0 0;color:#000000;padding-left:30px;"><span style="color:#800000;font-weight:bold;">require</span> <span style="color:#e60000;">"deep_test/rake_tasks"</span>
<span style="color:#806030;">.</span><span style="color:#806030;">.</span><span style="color:#806030;">.</span>

DeepTest::TestTask<span style="color:#806030;">.</span><span style="color:#400000;font-weight:bold;">new</span> <span style="color:#e60000;">"deep"</span> <span style="color:#400000;font-weight:bold;">do</span> |t|
t<span style="color:#806030;">.</span>number_of_workers <span style="color:#806030;">=</span> <span style="color:#c00000;">2</span>
t<span style="color:#806030;">.</span>pattern <span style="color:#806030;">=</span> <span style="color:#e60000;">"test/{unit,functional,integration}/**/*_test.rb"</span>
t<span style="color:#806030;">.</span>libs &lt;&lt; <span style="color:#e60000;">"test"</span>
t<span style="color:#806030;">.</span>worker_listener <span style="color:#806030;">=</span> <span style="color:#e60000;">"DeepTest::Database::MysqlSetupListener"</span>
<span style="color:#400000;font-weight:bold;">end</span>
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date>2010-01-18 01:22:52</wp:post_date>
		<wp:post_date_gmt>2010-01-17 23:22:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>one-and-a-half-useful-thing-to-know-when-using-deeptest-gem-with-mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fixing SeleniumRC to work with Firefox 3.6</title>
		<link>http://xplayer.wordpress.com/2010/02/04/fixing-seleniumrc-to-work-with-firefox-3-6/</link>
		<pubDate>Wed, 03 Feb 2010 23:27:36 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=132</guid>
		<description></description>
		<content:encoded><![CDATA[The brand new release of Firefox 3.6 brings, together with some improvements in the browser, also some headaches for all selenium users: actually the latest selenium RC jar (selenium-server.jar) won't work with Firefox 3.6.

The problem is related to the addons that Selenium will pretend to have in the Firefox instance fired up when Selenium RC server starts. As a matter of fact, those two addons are not declared to be compatible with 3.6.

The simple fix is then to edit the addons' install.rdf files in the selenium-server.jar to manually set the compatibility to 3.6.

Alternatively, you can download <a href="http://github.com/saucelabs/saucelenium/blob/master/selenium-sauce.jar">this patched jar</a> from <a href="http://github.com/saucelabs/saucelenium/">this</a> repository, rename it to selenium-server.jar and replace the previous jar with this.

The actual steps to fix my webrat gem (I use Selenium through Webrat) were
<ol>
	<li>download the above mentioned file (http://github.com/saucelabs/saucelenium/blob/master/selenium-sauce.jar)</li>
	<li>rename it to selenium-server.jar</li>
	<li>replace the previous file in the vendor folder of your webrat gem (mine was /usr/local/lib/ruby/gems/1.8/gems/webrat-0.7.0/vendor/selenium-server.jar)</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date>2010-02-04 01:27:36</wp:post_date>
		<wp:post_date_gmt>2010-02-03 23:27:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fixing-seleniumrc-to-work-with-firefox-3-6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="post_tag" nicename="selenium"><![CDATA[Selenium]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fixing-seleniumrc-to-working-with-firefox-3-6]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>332</wp:comment_id>
			<wp:comment_author><![CDATA[صفر واحد]]></wp:comment_author>
			<wp:comment_author_email>sa_01@gawab.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.sa-01.com</wp:comment_author_url>
			<wp:comment_author_IP>188.132.115.212</wp:comment_author_IP>
			<wp:comment_date>2010-03-13 20:29:36</wp:comment_date>
			<wp:comment_date_gmt>2010-03-13 18:29:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[FireFox browser is better
Thank you]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>A (still brief) experience on using Selenium to test a Rails + ajax app</title>
		<link>http://xplayer.wordpress.com/2010/02/08/a-still-brief-experience-on-using-selenium-to-test-a-rails-ajax-app/</link>
		<pubDate>Mon, 08 Feb 2010 21:50:43 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=139</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>

This is a note to make a point on our (mine and my team's) current use of Selenium  to test the ajax behaviour in the Rails webapp we're currently developing. Ajax replacing of part of the page is growing, and with it we have  to face the classical question: <em>"how do we test (I mean  automatically :-) the  ajax/javascript behaviours in our webapp?"</em>.

This is how we are trying to manage this issue now, after some days  of spiking on Selenium, Watir and BlueRidge (I hope to write more on Watir and BlueRidge in some future post, because these two tools are worth speaking).

Actually we are giving a try to the combination of Webrat + Selenium,  since we already have a big test suite of integration test using Webrat,  and have a good knowledge of the Webrat API.

We added the selenium-client gem to be able to drive Selenium through  the Webrat API.
This is extracted from our test environment configuration file:
<div>
<div><strong>test.rb</strong></div>
<div>
<pre>...
config.gem 'selenium-client', :lib =&gt; 'selenium/client'
config.gem "webrat", :version =&gt; '&gt;= 0.6.0'
...</pre>
</div>
</div>
Then, we defined a class from which all the selenium test cases will  inherit.
This class basically is used to
<ul>
	<li>disable the transactional fixtures in Rails, to allow the browser  process where Selenium runs to access the data prepared in the tests</li>
	<li>configure Webrat with the "selenium" mode</li>
	<li>be the place to collect helper methods as "login" or "logout", used  in many tests.</li>
</ul>
<div>
<div><strong>selenium_integration_test.rb</strong></div>
<div>
<pre>class SeleniumIntegrationTest &lt; ActionController::IntegrationTest
  self.use_transactional_fixtures = false

  setup :switch_webrat_to_selenium
  def switch_webrat_to_selenium
    Webrat.configure do |config|
      config.mode = :selenium
      config.application_environment = :test
    end

    selenium.set_speed(100)       # default is 0 ms
    selenium.set_timeout(10000)   # default is 30000 ms
  end

  teardown :delete_cookies
  def delete_cookies
    selenium.delete_all_visible_cookies
  end

protected
 ...
 [other helper methods here, like login, logout, and so on...]

 ...</pre>
</div>
</div>
We also added a rake task to be able to launch all the selenium tests
<div>
<div><strong>test.rake</strong></div>
<div>
<pre>namespace :test do
  ...
  ...

  desc "Run Selenium Test"
  Rake::TestTask.new(:selenium) do |t|
    t.libs &lt;&lt; "test"
    t.test_files = FileList['test/selenium/*test.rb']
    t.verbose = true
  end
end</pre>
</div>
</div>
One thing we learned through several repeated mistakes is that the  Webrat API is different when called in the "selenium" mode then the one  we were used to when using Webrat in the classical "rails" mode.
For example, the "assert_have_selector" method for selenium only takes  one argument, that is the CSS selector, while in the classical webrat  mode, the same method takes another parameter to specify the expected  content to match with (see this rdoc: <a rel="nofollow" href="http://gitrdoc.com/brynary/webrat/tree/master">http://gitrdoc.com/brynary/webrat/tree/master</a>).  So we had to define helper methods based on "assert_have_xpath" method  using xpath to express the same intent of a method like  assert_have_selector(css_selector, expected_content)

Here is our helper method
<div>
<div><strong>selenium_integration_test.rb</strong></div>
<div>
<pre>  ...
  def assert_has_id id, text_content
    assert_have_xpath "//*[@id='#{id}'][1][text()='#{text_content}']"
  end
  ...</pre>
</div>
</div>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2010-02-08 23:50:43</wp:post_date>
		<wp:post_date_gmt>2010-02-08 21:50:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-still-brief-experience-on-using-selenium-to-test-a-rails-ajax-app</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="category" nicename="testability"><![CDATA[Testability]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My first test using webdriver (aka Selenium 2.0)!</title>
		<link>http://xplayer.wordpress.com/2010/02/19/my-first-test-using-webdriver-aka-selenium-2-0/</link>
		<pubDate>Thu, 18 Feb 2010 23:24:17 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>

<a rel="nofollow" href="http://www.the-arm.com/2010/02/suffering-of-selenese-flu-try-webdriver/">As many say</a>, a good solution to <em>selenese flu</em> is <strong>Webdriver</strong> (see more at <a rel="nofollow" href="http://code.google.com/p/selenium">http://code.google.com/p/selenium</a>).

Webdriver has been accepted by the Selenium guys as the new approach  to web application testing, opposed to the classical "selenium 1.0"  approach, based on a javascript driver, which suffers from way too many  issues.
Unfortunately, Selenium 2.0, which plan to fully support Webdriver, is  still on an alpha release, and actually is very difficult to find  ruby-based web testing tools supporting this alpha version of selenium  2.0.
One of those tools is actually Watir (though Webrat too is planning to  support Selenium 2.0 sooner or later), and more precisely <a rel="nofollow" href="http://github.com/jarib/watir-webdriver">this  project</a> is quite stable to allow a first test drive.

So this is what I did:

First: installed required gems
<div>
<div>
<pre>  sudo gem install selenium-webdriver
  sudo gem install watir-webdriver --pre
</pre>
</div>
</div>
Second: configure my Rails testing configuration to use watir
<div>
<div><strong>config/environments/test.rb</strong></div>
<div>
<pre>  ...
  config.gem "watir-webdriver"
  ...
</pre>
</div>
</div>
<div>
<div><strong>test/test_helper.rb</strong></div>
<div>
<pre>  require 'test_help'
  ...
  require 'watir-webdriver'
  ...
</pre>
</div>
</div>
Third: write a test
<div>
<div><strong>test/integration/paypal_integration_test.rb</strong></div>
<div>
<pre>require 'test_helper'

class PaypalIntegrationTest &lt; ActionController::IntegrationTest
  include LocaleHelper
  self.use_transactional_fixtures = false

  def setup
    ... some setup stuff here ...   
    @browser = Watir::Browser.new(:firefox)
  end

  def teardown
    @browser.close
  end

  test "something interesting" do
    @browser.goto "https://developer.paypal.com/"
    @browser.text_field(:name, "login_email").set "my_test_account@sourcesense.com"
    @browser.text_field(:name, "login_password").set "mysecret"
    @browser.button(:name, "submit").click

    @browser.goto "https://localhost"

    @browser.link(:id, 'loginlink').click
    @browser.text_field(:name, "email").set @user.email
    @browser.text_field(:name, "password").set @user.password
    @browser.button(:text, "Login").click

    # add_a_product_to_cart
    product = Factory(:product, :code =&gt; "a code", :categories =&gt; [@juve_store])
    Factory(:product_variant, :code =&gt; "03", :availability =&gt; 99, :product =&gt; product)
    @browser.goto "https://localhost/frontend/products/show/#{product.id}"
    @browser.button(:id, "add_to_cart").click

    @browser.link(:text, "Checkout").click
    @browser.link(:id, "gotobuy").click

    # choose "Paypal"
    @browser.radios.last.set

    @browser.link(:id, "gotobuy").click

    sleep 5
    assert @browser.text.include?("Payment for order #{last_order_number()}")

    @browser.text_field(:name, "login_email").set "my_test_buyer@sourcesense.com"
    @browser.text_field(:name, "login_password").set "yetanothersecrethere"
    @browser.button(:text, "Accedi").click
    @browser.button(:text, "Paga ora").click

    sleep 5
    assert @browser.text.include?("Il pagamento è stato inviato")

    @browser.button(:id, "merchantReturn").click
    assert_contain_waiting("Your purchase")
    assert_contain_waiting(last_order_number())

  end

private

  def last_order_number
    Order.last ? Order.last.number : ""
  end

end
</pre>
</div>
</div>
Some comments here:
<ul>
	<li>This is a spike, so please don't say this test is too long and not  well refactored <img src="https://dev.sourcesense.com/confluence/images/icons/emoticons/smile.gif" border="0" alt="" width="20" height="20" align="absmiddle" /></li>
	<li>I had to put two sleep calls in two places (I gotta say that this  specific test, involving paypal sandbox, is really slow due to the  slowness in the paypal response time).</li>
	<li>Anyway, this alpha version of webdriver is still lacking: I cannot  say wheather this is a problem I'll have even with future (possibly more  stable) version of Webdriver.</li>
</ul>
Some references:
<ul>
	<li><a rel="nofollow" href="http://zeljkofilipin.com/2010/01/12/watir-on-webdriver/">http://zeljkofilipin.com/2010/01/12/watir-on-webdriver/</a></li>
	<li><a rel="nofollow" href="http://developer-in-test.blogspot.com/2010/01/chromewatir-watir-webdriver-update.html">http://developer-in-test.blogspot.com/2010/01/chromewatir-watir-webdriver-update.html</a></li>
	<li><a rel="nofollow" href="http://jarib.github.com/watir-webdriver/doc/index.html">http://jarib.github.com/watir-webdriver/doc/index.html</a></li>
</ul>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2010-02-19 01:24:17</wp:post_date>
		<wp:post_date_gmt>2010-02-18 23:24:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-first-test-using-webdriver-aka-selenium-2-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>336</wp:comment_id>
			<wp:comment_author><![CDATA[Delicious Bookmarks for June 15th from 17:16 to 23:50 &laquo; Lâmôlabs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.lamolabs.org/blog/3779/delicious-bookmarks-for-june-15th-from-1716-to-2350/</wp:comment_author_url>
			<wp:comment_author_IP>67.242.173.176</wp:comment_author_IP>
			<wp:comment_date>2010-06-16 06:04:06</wp:comment_date>
			<wp:comment_date_gmt>2010-06-16 04:04:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] My first test using webdriver (aka Selenium 2.0)! &laquo; XPlayer &#8211; June 15th  %(postalicious-tags)( tags: selenium webdriver example test testing web app )% [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1276661046]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>379</wp:comment_id>
			<wp:comment_author><![CDATA[Web Page Testing with Firefox 4.0 (and HTML 5 Dojo Toolkit Data Tags) | Interesting IT Tip&#039;s]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://interestingittips.wordpress.com/2011/04/25/web-page-testing-with-firefox-4-0-and-html-5-dojo-toolkit-data-tags/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.61.94</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 20:20:14</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 18:20:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to Al Hoang on a post for fixing &#8216;mkmf error&#8217; install problem with Ruby on ubuntu, and XPlayer for its test article. Possibly related posts: (automatically generated)Firefox is a friend of [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1303755615]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303755616.5733";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>assert_select_rjs reloaded!</title>
		<link>http://xplayer.wordpress.com/2010/09/16/assert_select_rjs-reloaded/</link>
		<pubDate>Thu, 16 Sep 2010 21:50:53 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="_mcePaste">If you ever dared to unit-test a Rails RJS action, for example something like this:</div>
<blockquote>
<pre>def my_ajax_action
   ...
   render(:update) do |page|
     page.replace_html 'shoppinglist', :partial =&gt; 'cart'
     page.replace_html 'items', :partial =&gt; 'layouts/items', :locals =&gt; { :cart =&gt; @cart }
   end
end</pre>
</blockquote>
<div id="_mcePaste">you may already know and use the <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a> testing helper, which basically will verify the structure of your RJS response.</div>
This testing method may really help you shortening the TDD feedback loop in an AJAX-based Rails webapp, and then you'll may even be confident enough and save one or two brittle Selenium tests.
<div>The only problem with <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a> is that is (IMHO) poorly documented and rarely googled about.</div>
<div id="_mcePaste">So, this is my turn to give back what we discovered.</div>
If you have a Rails webapp using jQuery as javascript framework, you may have a hard time using <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a> correctly, and this is why:
<div id="_mcePaste">for jQuery, this is the correct way to use <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a>:</div>
<blockquote>
<pre>assert_select_rjs :replace_html, '#shoppinglist'</pre>
</blockquote>
<div>it's important the '#' prefix here to refer to DOM element IDs, since the notation without '#' will work only if your app uses Prototype.</div>
<div id="_mcePaste">Another nice thing to know is the way to make assertion on the selection matched by the <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a>.</div>
<div id="_mcePaste">For example, this code</div>
<blockquote>
<pre>assert_select_rjs :replace_html, '#shoppinglist' do
    assert_select '#shipping_cost_description', /Shipping costs for France/
    assert_select '#shipping_cost_value', /&amp;euro; 12,30/
end</pre>
</blockquote>
<div>will verify that the section replaced inside the 'shoppinglist' element will match the two followings assetions.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[If you hava a Rails webapp with jQuery, then assert_select_rjs may really help you unit-testing all the AJAX-based logic.]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2010-09-16 23:50:53</wp:post_date>
		<wp:post_date_gmt>2010-09-16 21:50:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assert_select_rjs-reloaded</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="category" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1284673854]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dynamically add data accessor methods on &quot;static&quot; Rails data model</title>
		<link>http://xplayer.wordpress.com/2011/03/12/dinamically-add-data-accessor-methods-on-static-rails-data-model/</link>
		<pubDate>Sat, 12 Mar 2011 17:41:07 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[An useful metaprogramming spell I recently played with is the <code>Module#define_method()</code>, which dynamically adds an instance method to the class on which is called.

&nbsp;

I found it particularly useful to add data accessor methods on "static" Rails data model: suppose I'm working an e-commerce Rails webapp, and I have a <code>Country</code> model which maps the countries suitable for shipping, or a <code>PaymentType</code> model which represents all the possible payment types.

For these kind of models (and tables), which are typically static (they don't change often), you often have to access specific values, say <code>Country.italy</code> or <code>PaymentType.credit_card</code>.

In these cases, defining dynamically an accessor method may be useful and more clear than always perform a <code>find_by_name("my value")</code>.

So, for example, I open up my country.rb model class and add these lines

[sourcecode language="ruby"]
class &lt;&lt; self
  Country.all.each do |each_country|
    define_method(each_country.name.downcase.gsub('.', '').gsub(' ', '_')) do
      Country.find_by_iso_code(each_country.iso_code)
    end
  end
end
[/sourcecode]
And then opening the Rails console I will be able to type
<pre>1.8.7@epistore &gt; Country.sri_lanka
# {
                :id =&gt; 59,
              :zone =&gt; "U9",
           :enabled =&gt; true,
        :created_at =&gt; Tue, 20 Apr 2010 17:01:45 CEST +02:00,
        :updated_at =&gt; Tue, 20 Apr 2010 17:01:45 CEST +02:00,
          :iso_code =&gt; "LK",
    :country_set_id =&gt; nil
}</pre>
Just a note: as I said, <code>Module#define_method()</code> will add an <strong>instance method on the class</strong>. To add a <strong>class method</strong>, which is what I want, we have to use a different approach, using the <code>class &lt;&lt; self</code> syntax to add a singleton method in the receiver.

I may also add a query method on each <code>Country</code> instance to check that country against another country (for example, I may ask <code>my_country.italy?</code>)
<pre>  Country.all.each do |each_country|
    define_method(each_country.name.downcase.gsub('.', '').gsub(' ', '_').concat('?')) do
      has_iso_code? each_country.iso_code
    end
  end</pre>
And then, after issuing a <code>reload!</code> command in the Rails console, I may type:
<pre>1.8.7@epistore &gt; Country.usa.usa?
true
1.8.7@epistore &gt; Country.usa.italy?
false
1.8.7@epistore &gt; Country.usa.south_korea?
false
1.8.7@epistore &gt; Country.south_korea.south_korea?
true</pre>
Depending on the kind of Rails app you have, these may be a useful tip.]]></content:encoded>
		<excerpt:encoded><![CDATA[How metaprogramming may help you in dinamically add helper access methods to Rails models]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2011-03-12 19:41:07</wp:post_date>
		<wp:post_date_gmt>2011-03-12 17:41:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dinamically-add-data-accessor-methods-on-static-rails-data-model</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1299951669]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1299951671]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>363</wp:comment_id>
			<wp:comment_author><![CDATA[stoner]]></wp:comment_author>
			<wp:comment_author_email>pierodibello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xplayer.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>212.45.155.221</wp:comment_author_IP>
			<wp:comment_date>2011-03-14 16:12:19</wp:comment_date>
			<wp:comment_date_gmt>2011-03-14 14:12:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks mch, my fault! :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>362</wp:comment_parent>
			<wp:comment_user_id>544375</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1300111939]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300111940.2077";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"stoner";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>360</wp:comment_id>
			<wp:comment_author><![CDATA[khelll]]></wp:comment_author>
			<wp:comment_author_email>khellls@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.khelll.com</wp:comment_author_url>
			<wp:comment_author_IP>168.144.87.184</wp:comment_author_IP>
			<wp:comment_date>2011-03-13 15:44:01</wp:comment_date>
			<wp:comment_date_gmt>2011-03-13 13:44:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I suggest that you replace the call:

gsub('.', '').gsub(' ', '_')

with: 

parameterize('_')]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1300023841]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300023841.1638";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>361</wp:comment_id>
			<wp:comment_author><![CDATA[stoner]]></wp:comment_author>
			<wp:comment_author_email>pierodibello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xplayer.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.33.110.45</wp:comment_author_IP>
			<wp:comment_date>2011-03-13 16:42:51</wp:comment_date>
			<wp:comment_date_gmt>2011-03-13 14:42:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good advice khelll, thanks. In that case, you should also add to the chain a call to_s() to have a string.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>360</wp:comment_parent>
			<wp:comment_user_id>544375</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1300027371.859";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"stoner";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1300027371]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>362</wp:comment_id>
			<wp:comment_author><![CDATA[mch]]></wp:comment_author>
			<wp:comment_author_email>mch@mch.mch</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.129.227.36</wp:comment_author_IP>
			<wp:comment_date>2011-03-14 13:25:08</wp:comment_date>
			<wp:comment_date_gmt>2011-03-14 11:25:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[fyi 'Dynamically']]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1300101910]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300101911.0914";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>A review of &quot;Great Bash&quot; video by Carl Albing (O&#039;Reilly Media)</title>
		<link>http://xplayer.wordpress.com/2011/08/27/a-review-of-great-bash-video-by-carl-albing-oreilly-media/</link>
		<pubDate>Fri, 26 Aug 2011 23:21:41 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[Shell programming is a topic that every professional programmer should care about, and keep improving on, for several reasons.
Here are the first two I can think about:
<ol>
	<li>Because is essential in order to promote the automation of many manual processes (and automation is damn important!).</li>
	<li>Because I like to be a programmer as much as a <a title="what is a devop?" href="http://en.wikipedia.org/wiki/DevOps" target="_blank">devop</a>, and I want to be able to deploy what I develop, and take care of all the operational and system stuff related to the system I contribute to build.</li>
</ol>
Me myself made the mistake of underestimate the relevance of this topic for way too time in the past: don't make my same mistake :-)

<a title="Carl Albing's &quot;Great Bash&quot; by O'Reilly Media" href="http://oreilly.com/catalog/0636920013334" target="_blank">Carl Albing's "Great Bash" by O'Reilly Media</a> is a collection of several short video lessons on the basics of the shell programming.

I watch the "Great Bash" lessons hoping to learn more about shell programming, but unfortunately Carl Albing's video lessons are too introductory (IMHO).

It was nevertheless great to recap many things I learned here and there, and so my time watching it was not wasted at all, but I would recommend this video only to shell programmer beginners.

There are also some (really) minor defects in the technical way the video is recorded: the audio quality may be improved and sometimes the speaker take some long inexplicable pauses. But, that said, the overall quality is really good.

In the end I recommend to watch this video if you are a shell programmer beginner and you want to start understanding more about this topic.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date>2011-08-27 01:21:41</wp:post_date>
		<wp:post_date_gmt>2011-08-26 23:21:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-review-of-great-bash-video-by-carl-albing-oreilly-media</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="category" nicename="shell-programming"><![CDATA[Shell Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1314400903]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1314400903]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Rails project file for Sublime Text 2</title>
		<link>http://xplayer.wordpress.com/2012/01/22/a-rails-project-file-for-sublime-text-2/</link>
		<pubDate>Sat, 21 Jan 2012 23:39:03 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[The simplest thing that you can do to open up the <a href="http://www.sublimetext.com/" target="_blank">Sublime Text 2</a> editor on your Rails project is to just type in
<pre>$ subl .</pre>
on the Rails root directory¹.

A slightly better solution is to create a .sublime-project file in your project root directory, so that you may launch the editor with something like
<pre>$ subl --project my_rails_project.sublime-project</pre>
A question then arises, "How do I exclude useless directories as tmp or log from the project file?"

Answer: just edit the sublime-project file this way:
<pre>{
 "folders":
 [
   {
     "path": ".",
     "folder_exclude_patterns": ["tmp", "log"],
     "file_exclude_patterns": [".tmtags"]
   }
 ]
}</pre>
(and of course you should adapt it to your actual preferences on what to exclude from your project).

Note that you can also specify a <strong>"file_exclude_patterns"</strong> property to filter out some files (in my case I wanted to exclude the ctag index file).
<ol>
	<li>to install the command line tool, just follow the docs <a href="http://www.sublimetext.com/docs/2/osx_command_line.html">here</a>.</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date>2012-01-22 01:39:03</wp:post_date>
		<wp:post_date_gmt>2012-01-21 23:39:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-rails-project-file-for-sublime-text-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1327189144]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1327189144]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning Ruby reimplementing it: attr_reader</title>
		<link>http://xplayer.wordpress.com/2012/02/12/learning-ruby-reimplementing-it-attr_reader/</link>
		<pubDate>Sun, 12 Feb 2012 14:41:32 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2012/02/12/learning-ruby-reimplementing-it-attr_reader/</guid>
		<description></description>
		<content:encoded><![CDATA[How handy is the attr_reader method? Very handy indeed.

Never asked yourself how it may be implemented? Just do it!

This is my take:

[sourcecode language="ruby"]
module Kernel
  def attribute_reader(attribute)
    define_method(attribute) do
      instance_variable_get(&quot;@#{attribute}&quot;)
    end
  end
end


class MyClass
  attribute_reader :my_attribute
end

m = MyClass.new
m.instance_variable_set(&quot;@my_attribute&quot;, 42)

puts m.my_attribute # =&gt; 42
[/sourcecode]

What's yours?

Have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2012-02-12 16:41:32</wp:post_date>
		<wp:post_date_gmt>2012-02-12 14:41:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning-ruby-reimplementing-it-attr_reader</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1329057693]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1329057694]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning Ruby reimplementing it: attr_writer</title>
		<link>http://xplayer.wordpress.com/2012/02/12/attr_writer/</link>
		<pubDate>Sun, 12 Feb 2012 14:50:36 +0000</pubDate>
		<dc:creator>stoner</dc:creator>
		<guid isPermaLink="false">http://xplayer.wordpress.com/2012/02/12/attr_writer/</guid>
		<description></description>
		<content:encoded><![CDATA[This is how attr_writer may be (re)implemented:

[sourcecode language="ruby"]
module Kernel
  def attribute_writer(attribute)
    define_method(&quot;#{attribute}=&quot;.to_sym) do |value|
      instance_variable_set(&quot;@#{attribute}&quot;, value)
    end
  end
end

class MyClass
  attribute_writer :my_attribute
end

m = MyClass.new
m.my_attribute = 23

puts m.instance_variable_get &quot;@my_attribute&quot; # =&gt; 23
[/sourcecode]]]></content:encoded>
		<excerpt:encoded><![CDATA[<a href="http://xplayer.wordpress.com/2012/02/12/attr_writer/"><img src="http://xplayer.files.wordpress.com/2012/02/screen-shot-2012-02-12-at-3-49-12-pm.png" alt="attr_writer" class="size-full wp-image-226" /></a>]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date>2012-02-12 16:50:36</wp:post_date>
		<wp:post_date_gmt>2012-02-12 14:50:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>attr_writer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1329058236]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[544375]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1329058237]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>416</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Falcone]]></wp:comment_author>
			<wp:comment_author_email>danfalcone@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>96.241.165.24</wp:comment_author_IP>
			<wp:comment_date>2012-04-18 05:34:19</wp:comment_date>
			<wp:comment_date_gmt>2012-04-18 03:34:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the post!  I got a wrong number of arguments exception when I tried to add more than one attribute like this:

attribute_writer :one, :two  

I modified attribute_writer to take an arbitrary number of arguments:

def attribute_writer(attr1, *rest)
  rest &lt;&lt; attr1
  rest.each do |attribute|
      define_method(&quot;#{attribute}=&quot;.to_sym) do |value|
        instance_variable_set(&quot;@#{attribute}&quot;, value)
      end
  end
end]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1334720060]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334720061.0796";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
