<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | XPlayer]]></title>
  <link href="http://xplayer.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://xplayer.github.com/"/>
  <updated>2013-06-18T00:50:40+02:00</updated>
  <id>http://xplayer.github.com/</id>
  <author>
    <name><![CDATA[Pietro Di Bello]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting the Rails session cookie domain based on the actual server name]]></title>
    <link href="http://xplayer.github.com/blog/2013/06/18/setting-the-rails-session-cookie-domain-based-on-the-actual-server-name/"/>
    <updated>2013-06-18T00:08:00+02:00</updated>
    <id>http://xplayer.github.com/blog/2013/06/18/setting-the-rails-session-cookie-domain-based-on-the-actual-server-name</id>
    <content type="html"><![CDATA[<p>Say you have single Rails codebase publishing different apps with different domain names, all sharing a common higher-level domain name, for example:</p>

<pre><code>store.mysite.com
www.mysite.com
read.mysite.com
</code></pre>

<p>and you want all these apps to share the same Rails session cookie.</p>

<p>What you should do is set a proper domain in the session cookie, so that this domain is based on the current server name.</p>

<p>We needed just this for our e-commerce platform, which supports multiple stores (and thus multiple domain names) on a single Rails app.</p>

<p>This is the solution we came up with (tested on Rails 2.3.4): it's a simple middleware.</p>

<p>``` ruby
class SetCookieDomain
  def initialize(app)</p>

<pre><code>@app = app
</code></pre>

<p>  end</p>

<p>  def call(env)</p>

<pre><code>subdomain = remove_innermost_domain_from(env["SERVER_NAME"])
env["rack.session.options"][:domain] = subdomain
log "forced cookie domain to #{subdomain}"

@app.call(env)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def remove_innermost_domain_from(server_name)</p>

<pre><code>server_name.gsub(/^[^.]*/, '')
</code></pre>

<p>  end</p>

<p>  def log(message)</p>

<pre><code>RAILS_DEFAULT_LOGGER.info("========")
RAILS_DEFAULT_LOGGER.info(message)
RAILS_DEFAULT_LOGGER.info("========")
</code></pre>

<p>  end
end
```</p>

<p>And this is a spec:</p>

<p>``` ruby
describe SetCookieDomain do</p>

<p>  let(:app) { stub("app", :call => "") }
  let(:set_cookie_domain) { SetCookieDomain.new(app) }</p>

<p>  before(:each) do</p>

<pre><code>@env = {
  "SERVER_NAME" =&gt; "store.any.it", "SERVER_PORT" =&gt; "3000",
  "HTTP_HOST"   =&gt; "store.any.it:3000",
  "REQUEST_URI" =&gt; "/",
  "rack.session.options" =&gt; { :path =&gt; "/", :key =&gt; "_session_id", :expire_after =&gt; nil, :httponly =&gt; true, :domain =&gt; nil, :id =&gt; "any_id" },
}
</code></pre>

<p>  end</p>

<p>  it "forces the session cookie domain to be the second-level domain of the full domain name" do</p>

<pre><code>@env["SERVER_NAME"] = "store.xpeppers.com"

@env["rack.session.options"][:domain].should be_nil

set_cookie_domain.call(@env)

@env["rack.session.options"][:domain].should == ".xpeppers.com"
</code></pre>

<p>  end
end
```</p>

<p>To enable the middleware, you've to put this line in your Rails startup files (e.g. environment.rb)</p>

<p><code>ruby
config.middleware.use "SetCookieDomain"
</code></p>
]]></content>
  </entry>
  
</feed>
