<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[XPlayer]]></title>
  <link href="http://xplayer.github.com/atom.xml" rel="self"/>
  <link href="http://xplayer.github.com/"/>
  <updated>2013-06-18T00:40:14+02:00</updated>
  <id>http://xplayer.github.com/</id>
  <author>
    <name><![CDATA[Pietro Di Bello]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Tracco: the Trello Effort Tracker gem]]></title>
    <link href="http://xplayer.github.com/blog/2013/03/18/introducing-tracco-the-trello-effort-tracker-gem/"/>
    <updated>2013-03-18T23:27:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2013/03/18/introducing-tracco-the-trello-effort-tracker-gem</id>
    <content type="html"><![CDATA[<h2>Trello meets tracking</h2>

<p><a href="https://trello.com">Trello</a> is a very good surrogate for a physical team board: it&#8217;s simple and effective, and it can really help when you have a distributed team.
That said, Trello (still) doesn&#8217;t offer a way to track time estimated and actually spent on cards, though many people are <a href="https://trello.com/card/time-tracking/4d5ea62fd76aa1136000000c/1054">asking for that feature</a> on Trello&#8217;s development board.</p>

<p>I had such precise need while working with one of our teams, so I came up with the following idea: using Trello&#8217;s mention system to send tracking notifications to a predefined board member (I call him the &#8216;tracking user&#8217;), collecting along this way all tracking events such as estimates and efforts.</p>

<p><img src="https://raw.github.com/xpepper/tracco/master/images/tracking_example.png" alt="A tracking example" /></p>

<p>Then I built a simple tool to persist and aggregate this data, so that it would have been possible to show interesting metrics such as estimate errors. I called this tool <a href="https://github.com/xpepper/tracco">Tracco</a>: a gem to help track estimates and efforts from Trello.</p>

<p><a href="https://github.com/xpepper/tracco">Tracco</a> is a gem, and you can use it as is, but it&#8217;s intended use is inside an app which displays collected data.
To give an idea of what I mean, I developed a bare minimum Rails app to properly present card estimates and efforts: it&#8217;s called <a href="https://github.com/xpepper/trello_effort_app">Trello Effort App</a>. It&#8217;s really simple, but I wish it could be improved with the help of other committers :O)</p>

<h2>More details</h2>

<p>To start using <a href="https://github.com/xpepper/tracco">Tracco</a> you should have a Trello account, a Trello board and a board member to use as &#8216;tracking user&#8217;.
You&#8217;ll also need to know your Trello developer key and generate a proper auth token to have access to the trackinguser&#8217;s notifications.
To see how to have these two keys, read <a href="#api_key">the following section</a>.</p>

<p>The Trello API is used behind the scenes to read data from the team board. <a href="https://github.com/xpepper/tracco">Tracco</a> uses the awesome <a href="https://github.com/jeremytregunna/ruby-trello">Trello API Ruby wrapper</a> for this purpose.</p>

<h3>An example</h3>

<p>Here I show an example of how you could use <a href="https://github.com/xpepper/tracco">Tracco</a>. For more info please refer to the <a href="https://github.com/xpepper/tracco/blob/master/README.md">official README</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/xpepper/tracco.git
</span><span class='line'>cd tracco
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>Then run the initializer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tracco --initialize</span></code></pre></td></tr></table></div></figure>


<p>to create the two configuration files, which you&#8217;ll need to edit properly (see <em>&#8220;Where do I get an API key and API secret?&#8221;</em> section).</p>

<p>To fill the correct values for the mongodb environments (<a href="http://mongoid.org/en/mongoid/docs/installation.html#configuration">see here</a> to have more details).</p>

<h3><a id="api_key"></a>Where do I get an API key?</h3>

<p>Log in to Trello with your account and visit <a href="https://trello.com/1/appKey/generate">https://trello.com/1/appKey/generate</a> to get your developer_public_key.</p>

<h3>Where do I get an API Access Token Key?</h3>

<p>To generate a proper access token key, log in to Trello with the &#8216;tracking user&#8217; account. Then go to this URL:</p>

<pre><code>https://trello.com/1/connect?key=&lt;YOUR_DEVELOPER_PUBLIC_KEY&gt;&amp;name=Tracco&amp;response_type=token&amp;scope=read&amp;expiration=never
</code></pre>

<p>At the end of this process, you&#8217;ll receive a valid access_token_key, which is needed by Tracco to have the proper rights to fetch all the tracking notifications sent as comments to the &#8216;tracking user&#8217;.</p>

<h2>Collecting data from Trello</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tracco collect today --environment test # will extract today's tracked data and store on the test db
</span><span class='line'>
</span><span class='line'>tracco collect today  # will extract today's tracked data and store on the default (that is development) db
</span><span class='line'>
</span><span class='line'>tracco collect 2012-11-1 --environment production  # will extract tracked data starting from November the 1st, 2012 and store them into the production db</span></code></pre></td></tr></table></div></figure>


<h3>Console</h3>

<p>You can open a irb console with the ruby-trello gem and this gem loaded, so that you can query the db or the Trello API and play with them</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tracco console</span></code></pre></td></tr></table></div></figure>


<p>The default env is development. To load a console in the (e.g.) production db env, execute:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tracco console -e production</span></code></pre></td></tr></table></div></figure>


<h2>Estimate format convention</h2>

<p>To set an estimate on a card, a Trello user should send a notification from that card to the tracker username, e.g.</p>

<pre><code>@trackinguser [15p]
@trackinguser [1.5d]
@trackinguser [12h]
</code></pre>

<p>estimates can be given in hours (h), days (d/g) or pomodori (p).</p>

<pre><code>@trackinguser 22.11.2012 [4h]
</code></pre>

<p>will add the estimate (4 hours) in date 22.11.2012.</p>

<h2>Effort format convention</h2>

<p>To set an effort in the current day on a card, a Trello user should send a notification from that card to the tracker username, e.g.</p>

<pre><code>@trackinguser +6p
@trackinguser +4h
@trackinguser +0.5g
</code></pre>

<p>efforts can be given in hours (h), days (d/g) or pomodori (p).</p>

<h3>Tracking an effort in a specific date</h3>

<p>To set an effort in a date different from the notification date, just add a date in the message</p>

<pre><code>@trackinguser 23.10.2012 +6p
</code></pre>

<p>There&#8217;s even a shortcut for efforts spent yesterday:</p>

<pre><code>@trackinguser yesterday +6p
@trackinguser +6p yesterday
</code></pre>

<h3>Tracking an effort on more members</h3>

<p>By default, the effort is tracked on the member which sends the tracking notification.</p>

<p>To set an effort for more than a Trello user (e.g. pair programming), just add the other user in the message, e.g.</p>

<pre><code>@trackinguser +3p @alessandrodescovi
</code></pre>

<p>To set an effort just for other Trello users (excluding the current user), just include the users in round brackets, e.g.</p>

<pre><code>@trackinguser +3p (@alessandrodescovi @michelevincenzi)
</code></pre>

<h3>Tracking a card as finished (aka DONE)</h3>

<p>Sending a tracking notification with the word DONE</p>

<pre><code>@trackinguser DONE
</code></pre>

<p>will mark the card as closed.</p>

<p>Moreover, a card moved into a DONE column (the name of the Trello list contains the word &#8220;Done&#8221;) is automatically marked as done.</p>

<h2>Google Docs exporter</h2>

<p>To export all your tracked cards on a google docs named &#8216;my_sheet&#8217; in the &#8216;tracking&#8217; worksheet, run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tracco export_google_docs my_sheet tracking -e production</span></code></pre></td></tr></table></div></figure>


<p>The default env is development.</p>

<p>If you provide no name for the spreadsheet, a default name will be used.
If the spreadsheet name you provide does not exists, it will be created in you google drive account.</p>

<p>So, running simply</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tracco</span> <span class="n">export_google_docs</span>
</span></code></pre></td></tr></table></div></figure>


<p>will create (or update) a spreadsheet named &#8220;trello effort tracking&#8221; using the development db env.</p>

<h2>Requirements</h2>

<ul>
<li>MRI version 1.9.3+</li>
<li><a href="http://www.mongodb.org/">mongoDB</a> - macosx users with homebrew will just run &#8216;brew install mongodb&#8217; to have mongoDB installed on their machine.</li>
<li>(optional) <a href="https://rvm.io/rvm/install/">rvm</a> is useful (but optional) for development</li>
</ul>


<h2>Roadmap and improvements</h2>

<p>I develop <a href="https://github.com/xpepper/tracco">Tracco</a> using <a href="https://trello.com/board/trello-effort-tracker-roadmap/509c3228dcb1ac3f1c018791">Trello itself</a>.</p>

<h2>Contributing</h2>

<p>If you&#8217;d like to hack on <a href="https://github.com/xpepper/tracco">Tracco</a>, start by forking the repo on GitHub:</p>

<p>https://github.com/xpepper/tracco</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Ruby reimplementing it: attr_reader]]></title>
    <link href="http://xplayer.github.com/blog/2012/02/12/learning-ruby-reimplementing-it-attr_reader/"/>
    <updated>2012-02-12T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2012/02/12/learning-ruby-reimplementing-it-attr_reader</id>
    <content type="html"><![CDATA[How handy is the attr_reader method? Very handy indeed.

<p>Never asked yourself how it may be implemented? Just do it!</p>
This is my take:
<br>
<pre>
module Kernel
  def attribute_reader(attribute)
    define_method(attribute) do
      instance_variable_get(&quot;@#{attribute}&quot;)
    end
  end
end

class MyClass
  attribute_reader :my_attribute
end

m = MyClass.new
m.instance_variable_set(&quot;@my_attribute&quot;, 42)

puts m.my_attribute # =&gt; 42
</pre>

What&#8217;s yours?

Have fun!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Ruby reimplementing it: attr_writer]]></title>
    <link href="http://xplayer.github.com/blog/2012/02/12/attr_writer/"/>
    <updated>2012-02-12T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2012/02/12/attr_writer</id>
    <content type="html"><![CDATA[This is how attr_writer may be (re)implemented:
<p>
<pre>
module Kernel
  def attribute_writer(attribute)
    define_method(&quot;#{attribute}=&quot;.to_sym) do |value|
      instance_variable_set(&quot;@#{attribute}&quot;, value)
    end
  end
end

class MyClass
  attribute_writer :my_attribute
end

m = MyClass.new
m.my_attribute = 23

puts m.instance_variable_get &quot;@my_attribute&quot; # =&gt; 23
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Rails project file for Sublime Text 2]]></title>
    <link href="http://xplayer.github.com/blog/2012/01/22/a-rails-project-file-for-sublime-text-2/"/>
    <updated>2012-01-22T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2012/01/22/a-rails-project-file-for-sublime-text-2</id>
    <content type="html"><![CDATA[The simplest thing that you can do to open up the <a href="http://www.sublimetext.com/" target="_blank">Sublime Text 2</a> editor on your Rails project is to just type in
<pre>$ subl .</pre>
on the Rails root directory¹.

A slightly better solution is to create a .sublime-project file in your project root directory, so that you may launch the editor with something like
<pre>$ subl --project my_rails_project.sublime-project</pre>
A question then arises, &#8220;How do I exclude useless directories as tmp or log from the project file?&#8221;

Answer: just edit the sublime-project file this way:
<pre>{
 "folders":
 [
   {
     "path": ".",
     "folder_exclude_patterns": ["tmp", "log"],
     "file_exclude_patterns": [".tmtags"]
   }
 ]
}</pre>
(and of course you should adapt it to your actual preferences on what to exclude from your project).

Note that you can also specify a <strong>&#8220;file_exclude_patterns&#8221;</strong> property to filter out some files (in my case I wanted to exclude the ctag index file).
<ol>
	<li>to install the command line tool, just follow the docs <a href="http://www.sublimetext.com/docs/2/osx_command_line.html">here</a>.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A review of "Great Bash" video by Carl Albing (O'Reilly Media)]]></title>
    <link href="http://xplayer.github.com/blog/2011/08/27/a-review-of-great-bash-video-by-carl-albing-oreilly-media/"/>
    <updated>2011-08-27T00:00:00+02:00</updated>
    <id>http://xplayer.github.com/blog/2011/08/27/a-review-of-great-bash-video-by-carl-albing-oreilly-media</id>
    <content type="html"><![CDATA[Shell programming is a topic that every professional programmer should care about, and keep improving on, for several reasons.
Here are the first two I can think about:
<ol>
	<li>Because is essential in order to promote the automation of many manual processes (and automation is damn important!).</li>
	<li>Because I like to be a programmer as much as a <a title="what is a devop?" href="http://en.wikipedia.org/wiki/DevOps" target="_blank">devop</a>, and I want to be able to deploy what I develop, and take care of all the operational and system stuff related to the system I contribute to build.</li>
</ol>
Me myself made the mistake of underestimate the relevance of this topic for way too time in the past: don&#8217;t make my same mistake :-)

<a title="Carl Albing's &quot;Great Bash&quot; by O'Reilly Media" href="http://oreilly.com/catalog/0636920013334" target="_blank">Carl Albing&#8217;s &#8220;Great Bash&#8221; by O&#8217;Reilly Media</a> is a collection of several short video lessons on the basics of the shell programming.

I watch the &#8220;Great Bash&#8221; lessons hoping to learn more about shell programming, but unfortunately Carl Albing&#8217;s video lessons are too introductory (IMHO).

It was nevertheless great to recap many things I learned here and there, and so my time watching it was not wasted at all, but I would recommend this video only to shell programmer beginners.

There are also some (really) minor defects in the technical way the video is recorded: the audio quality may be improved and sometimes the speaker take some long inexplicable pauses. But, that said, the overall quality is really good.

In the end I recommend to watch this video if you are a shell programmer beginner and you want to start understanding more about this topic.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamically add data accessor methods on "static" Rails data model]]></title>
    <link href="http://xplayer.github.com/blog/2011/03/12/dinamically-add-data-accessor-methods-on-static-rails-data-model/"/>
    <updated>2011-03-12T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2011/03/12/dinamically-add-data-accessor-methods-on-static-rails-data-model</id>
    <content type="html"><![CDATA[An useful metaprogramming spell I recently played with is the <code>Module#define_method()</code>, which dynamically adds an instance method to the class on which is called.

&nbsp;

I found it particularly useful to add data accessor methods on &#8220;static&#8221; Rails data model: suppose I&#8217;m working an e-commerce Rails webapp, and I have a <code>Country</code> model which maps the countries suitable for shipping, or a <code>PaymentType</code> model which represents all the possible payment types.

For these kind of models (and tables), which are typically static (they don&#8217;t change often), you often have to access specific values, say <code>Country.italy</code> or <code>PaymentType.credit_card</code>.

In these cases, defining dynamically an accessor method may be useful and more clear than always perform a <code>find_by_name("my value")</code>.

So, for example, I open up my country.rb model class and add these lines

[sourcecode language=&#8221;ruby&#8221;]
class &lt;&lt; self
  Country.all.each do |each_country|
    define_method(each_country.name.downcase.gsub(&#8216;.&#8217;, &#8221;).gsub(&#8217; &#8216;, &#8216;_&#8217;)) do
      Country.find_by_iso_code(each_country.iso_code)
    end
  end
end
[/sourcecode]
And then opening the Rails console I will be able to type
<pre>1.8.7@epistore &gt; Country.sri_lanka
# {
                :id =&gt; 59,
              :zone =&gt; "U9",
           :enabled =&gt; true,
        :created_at =&gt; Tue, 20 Apr 2010 17:01:45 CEST +02:00,
        :updated_at =&gt; Tue, 20 Apr 2010 17:01:45 CEST +02:00,
          :iso_code =&gt; "LK",
    :country_set_id =&gt; nil
}</pre>
Just a note: as I said, <code>Module#define_method()</code> will add an <strong>instance method on the class</strong>. To add a <strong>class method</strong>, which is what I want, we have to use a different approach, using the <code>class &lt;&lt; self</code> syntax to add a singleton method in the receiver.

I may also add a query method on each <code>Country</code> instance to check that country against another country (for example, I may ask <code>my_country.italy?</code>)
<pre>  Country.all.each do |each_country|
    define_method(each_country.name.downcase.gsub('.', '').gsub(' ', '_').concat('?')) do
      has_iso_code? each_country.iso_code
    end
  end</pre>
And then, after issuing a <code>reload!</code> command in the Rails console, I may type:
<pre>1.8.7@epistore &gt; Country.usa.usa?
true
1.8.7@epistore &gt; Country.usa.italy?
false
1.8.7@epistore &gt; Country.usa.south_korea?
false
1.8.7@epistore &gt; Country.south_korea.south_korea?
true</pre>
Depending on the kind of Rails app you have, these may be a useful tip.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[assert_select_rjs reloaded!]]></title>
    <link href="http://xplayer.github.com/blog/2010/09/16/assert_select_rjs-reloaded/"/>
    <updated>2010-09-16T00:00:00+02:00</updated>
    <id>http://xplayer.github.com/blog/2010/09/16/assert_select_rjs-reloaded</id>
    <content type="html"><![CDATA[<div id="_mcePaste">If you ever dared to unit-test a Rails RJS action, for example something like this:</div>
<blockquote>
<pre>def my_ajax_action
   ...
   render(:update) do |page|
     page.replace_html 'shoppinglist', :partial =&gt; 'cart'
     page.replace_html 'items', :partial =&gt; 'layouts/items', :locals =&gt; { :cart =&gt; @cart }
   end
end</pre>
</blockquote>
<div id="_mcePaste">you may already know and use the <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a> testing helper, which basically will verify the structure of your RJS response.</div>
This testing method may really help you shortening the TDD feedback loop in an AJAX-based Rails webapp, and then you&#8217;ll may even be confident enough and save one or two brittle Selenium tests.
<div>The only problem with <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a> is that is (IMHO) poorly documented and rarely googled about.</div>
<div id="_mcePaste">So, this is my turn to give back what we discovered.</div>
If you have a Rails webapp using jQuery as javascript framework, you may have a hard time using <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a> correctly, and this is why:
<div id="_mcePaste">for jQuery, this is the correct way to use <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a>:</div>
<blockquote>
<pre>assert_select_rjs :replace_html, '#shoppinglist'</pre>
</blockquote>
<div>it&#8217;s important the &#8216;#&#8217; prefix here to refer to DOM element IDs, since the notation without &#8216;#&#8217; will work only if your app uses Prototype.</div>
<div id="_mcePaste">Another nice thing to know is the way to make assertion on the selection matched by the <a href="http://rubydoc.info/docs/rails/2.3.8/ActionController/Assertions/SelectorAssertions:assert_select_rjs">assert_select_rjs</a>.</div>
<div id="_mcePaste">For example, this code</div>
<blockquote>
<pre>assert_select_rjs :replace_html, '#shoppinglist' do
    assert_select '#shipping_cost_description', /Shipping costs for France/
    assert_select '#shipping_cost_value', /&amp;euro; 12,30/
end</pre>
</blockquote>
<div>will verify that the section replaced inside the &#8216;shoppinglist&#8217; element will match the two followings assetions.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first test using webdriver (aka Selenium 2.0)!]]></title>
    <link href="http://xplayer.github.com/blog/2010/02/19/my-first-test-using-webdriver-aka-selenium-2-0/"/>
    <updated>2010-02-19T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2010/02/19/my-first-test-using-webdriver-aka-selenium-2-0</id>
    <content type="html"><![CDATA[<div>
<div>

<a rel="nofollow" href="http://www.the-arm.com/2010/02/suffering-of-selenese-flu-try-webdriver/">As many say</a>, a good solution to <em>selenese flu</em> is <strong>Webdriver</strong> (see more at <a rel="nofollow" href="http://code.google.com/p/selenium">http://code.google.com/p/selenium</a>).

Webdriver has been accepted by the Selenium guys as the new approach  to web application testing, opposed to the classical &#8220;selenium 1.0&#8221;  approach, based on a javascript driver, which suffers from way too many  issues.
Unfortunately, Selenium 2.0, which plan to fully support Webdriver, is  still on an alpha release, and actually is very difficult to find  ruby-based web testing tools supporting this alpha version of selenium  2.0.
One of those tools is actually Watir (though Webrat too is planning to  support Selenium 2.0 sooner or later), and more precisely <a rel="nofollow" href="http://github.com/jarib/watir-webdriver">this  project</a> is quite stable to allow a first test drive.

So this is what I did:

First: installed required gems
<div>
<div>
<pre>  sudo gem install selenium-webdriver
  sudo gem install watir-webdriver --pre
</pre>
</div>
</div>
Second: configure my Rails testing configuration to use watir
<div>
<div><strong>config/environments/test.rb</strong></div>
<div>
<pre>  ...
  config.gem "watir-webdriver"
  ...
</pre>
</div>
</div>
<div>
<div><strong>test/test_helper.rb</strong></div>
<div>
<pre>  require 'test_help'
  ...
  require 'watir-webdriver'
  ...
</pre>
</div>
</div>
Third: write a test
<div>
<div><strong>test/integration/paypal_integration_test.rb</strong></div>
<div>
<pre>require 'test_helper'

class PaypalIntegrationTest &lt; ActionController::IntegrationTest
  include LocaleHelper
  self.use_transactional_fixtures = false

  def setup
    ... some setup stuff here ...   
    @browser = Watir::Browser.new(:firefox)
  end

  def teardown
    @browser.close
  end

  test "something interesting" do
    @browser.goto "https://developer.paypal.com/"
    @browser.text_field(:name, "login_email").set "my_test_account@sourcesense.com"
    @browser.text_field(:name, "login_password").set "mysecret"
    @browser.button(:name, "submit").click

    @browser.goto "https://localhost"

    @browser.link(:id, 'loginlink').click
    @browser.text_field(:name, "email").set @user.email
    @browser.text_field(:name, "password").set @user.password
    @browser.button(:text, "Login").click

    # add_a_product_to_cart
    product = Factory(:product, :code =&gt; "a code", :categories =&gt; [@juve_store])
    Factory(:product_variant, :code =&gt; "03", :availability =&gt; 99, :product =&gt; product)
    @browser.goto "https://localhost/frontend/products/show/#{product.id}"
    @browser.button(:id, "add_to_cart").click

    @browser.link(:text, "Checkout").click
    @browser.link(:id, "gotobuy").click

    # choose "Paypal"
    @browser.radios.last.set

    @browser.link(:id, "gotobuy").click

    sleep 5
    assert @browser.text.include?("Payment for order #{last_order_number()}")

    @browser.text_field(:name, "login_email").set "my_test_buyer@sourcesense.com"
    @browser.text_field(:name, "login_password").set "yetanothersecrethere"
    @browser.button(:text, "Accedi").click
    @browser.button(:text, "Paga ora").click

    sleep 5
    assert @browser.text.include?("Il pagamento è stato inviato")

    @browser.button(:id, "merchantReturn").click
    assert_contain_waiting("Your purchase")
    assert_contain_waiting(last_order_number())

  end

private

  def last_order_number
    Order.last ? Order.last.number : ""
  end

end
</pre>
</div>
</div>
Some comments here:
<ul>
	<li>This is a spike, so please don&#8217;t say this test is too long and not  well refactored <img src="https://dev.sourcesense.com/confluence/images/icons/emoticons/smile.gif" border="0" alt="" width="20" height="20" align="absmiddle" /></li>
	<li>I had to put two sleep calls in two places (I gotta say that this  specific test, involving paypal sandbox, is really slow due to the  slowness in the paypal response time).</li>
	<li>Anyway, this alpha version of webdriver is still lacking: I cannot  say wheather this is a problem I&#8217;ll have even with future (possibly more  stable) version of Webdriver.</li>
</ul>
Some references:
<ul>
	<li><a rel="nofollow" href="http://zeljkofilipin.com/2010/01/12/watir-on-webdriver/">http://zeljkofilipin.com/2010/01/12/watir-on-webdriver/</a></li>
	<li><a rel="nofollow" href="http://developer-in-test.blogspot.com/2010/01/chromewatir-watir-webdriver-update.html">http://developer-in-test.blogspot.com/2010/01/chromewatir-watir-webdriver-update.html</a></li>
	<li><a rel="nofollow" href="http://jarib.github.com/watir-webdriver/doc/index.html">http://jarib.github.com/watir-webdriver/doc/index.html</a></li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A (still brief) experience on using Selenium to test a Rails + ajax app]]></title>
    <link href="http://xplayer.github.com/blog/2010/02/08/a-still-brief-experience-on-using-selenium-to-test-a-rails-ajax-app/"/>
    <updated>2010-02-08T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2010/02/08/a-still-brief-experience-on-using-selenium-to-test-a-rails-ajax-app</id>
    <content type="html"><![CDATA[<div>
<div>

This is a note to make a point on our (mine and my team&#8217;s) current use of Selenium  to test the ajax behaviour in the Rails webapp we&#8217;re currently developing. Ajax replacing of part of the page is growing, and with it we have  to face the classical question: <em>&#8220;how do we test (I mean  automatically :-) the  ajax/javascript behaviours in our webapp?&#8221;</em>.

This is how we are trying to manage this issue now, after some days  of spiking on Selenium, Watir and BlueRidge (I hope to write more on Watir and BlueRidge in some future post, because these two tools are worth speaking).

Actually we are giving a try to the combination of Webrat + Selenium,  since we already have a big test suite of integration test using Webrat,  and have a good knowledge of the Webrat API.

We added the selenium-client gem to be able to drive Selenium through  the Webrat API.
This is extracted from our test environment configuration file:
<div>
<div><strong>test.rb</strong></div>
<div>
<pre>...
config.gem 'selenium-client', :lib =&gt; 'selenium/client'
config.gem "webrat", :version =&gt; '&gt;= 0.6.0'
...</pre>
</div>
</div>
Then, we defined a class from which all the selenium test cases will  inherit.
This class basically is used to
<ul>
	<li>disable the transactional fixtures in Rails, to allow the browser  process where Selenium runs to access the data prepared in the tests</li>
	<li>configure Webrat with the &#8220;selenium&#8221; mode</li>
	<li>be the place to collect helper methods as &#8220;login&#8221; or &#8220;logout&#8221;, used  in many tests.</li>
</ul>
<div>
<div><strong>selenium_integration_test.rb</strong></div>
<div>
<pre>class SeleniumIntegrationTest &lt; ActionController::IntegrationTest
  self.use_transactional_fixtures = false

  setup :switch_webrat_to_selenium
  def switch_webrat_to_selenium
    Webrat.configure do |config|
      config.mode = :selenium
      config.application_environment = :test
    end

    selenium.set_speed(100)       # default is 0 ms
    selenium.set_timeout(10000)   # default is 30000 ms
  end

  teardown :delete_cookies
  def delete_cookies
    selenium.delete_all_visible_cookies
  end

protected
 ...
 [other helper methods here, like login, logout, and so on...]

 ...</pre>
</div>
</div>
We also added a rake task to be able to launch all the selenium tests
<div>
<div><strong>test.rake</strong></div>
<div>
<pre>namespace :test do
  ...
  ...

  desc "Run Selenium Test"
  Rake::TestTask.new(:selenium) do |t|
    t.libs &lt;&lt; "test"
    t.test_files = FileList['test/selenium/*test.rb']
    t.verbose = true
  end
end</pre>
</div>
</div>
One thing we learned through several repeated mistakes is that the  Webrat API is different when called in the &#8220;selenium&#8221; mode then the one  we were used to when using Webrat in the classical &#8220;rails&#8221; mode.
For example, the &#8220;assert_have_selector&#8221; method for selenium only takes  one argument, that is the CSS selector, while in the classical webrat  mode, the same method takes another parameter to specify the expected  content to match with (see this rdoc: <a rel="nofollow" href="http://gitrdoc.com/brynary/webrat/tree/master">http://gitrdoc.com/brynary/webrat/tree/master</a>).  So we had to define helper methods based on &#8220;assert_have_xpath&#8221; method  using xpath to express the same intent of a method like  assert_have_selector(css_selector, expected_content)

Here is our helper method
<div>
<div><strong>selenium_integration_test.rb</strong></div>
<div>
<pre>  ...
  def assert_has_id id, text_content
    assert_have_xpath "//*[@id='#{id}'][1][text()='#{text_content}']"
  end
  ...</pre>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing SeleniumRC to work with Firefox 3.6]]></title>
    <link href="http://xplayer.github.com/blog/2010/02/04/fixing-seleniumrc-to-work-with-firefox-3-6/"/>
    <updated>2010-02-04T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2010/02/04/fixing-seleniumrc-to-work-with-firefox-3-6</id>
    <content type="html"><![CDATA[The brand new release of Firefox 3.6 brings, together with some improvements in the browser, also some headaches for all selenium users: actually the latest selenium RC jar (selenium-server.jar) won&#8217;t work with Firefox 3.6.

The problem is related to the addons that Selenium will pretend to have in the Firefox instance fired up when Selenium RC server starts. As a matter of fact, those two addons are not declared to be compatible with 3.6.

The simple fix is then to edit the addons&#8217; install.rdf files in the selenium-server.jar to manually set the compatibility to 3.6.

Alternatively, you can download <a href="http://github.com/saucelabs/saucelenium/blob/master/selenium-sauce.jar">this patched jar</a> from <a href="http://github.com/saucelabs/saucelenium/">this</a> repository, rename it to selenium-server.jar and replace the previous jar with this.

The actual steps to fix my webrat gem (I use Selenium through Webrat) were
<ol>
	<li>download the above mentioned file (http://github.com/saucelabs/saucelenium/blob/master/selenium-sauce.jar)</li>
	<li>rename it to selenium-server.jar</li>
	<li>replace the previous file in the vendor folder of your webrat gem (mine was /usr/local/lib/ruby/gems/1.8/gems/webrat-0.7.0/vendor/selenium-server.jar)</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One (and a half) useful thing to know when using DeepTest gem with MySQL]]></title>
    <link href="http://xplayer.github.com/blog/2010/01/18/one-and-a-half-useful-thing-to-know-when-using-deeptest-gem-with-mysql/"/>
    <updated>2010-01-18T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2010/01/18/one-and-a-half-useful-thing-to-know-when-using-deeptest-gem-with-mysql</id>
    <content type="html"><![CDATA[<a href="http://github.com/qxjit/deep-test">DeepTest</a> currently won&#8217;t work if you&#8217;ve configured MySQL with no password (in other words, if you are able to connect to mysql with a simple &#8220;mysql -u root&#8221;).
To fix this, you have to patch DeepTest (I know, asap I&#8217;ll go through the whole process to propose the patch to the original project leader).
Actually, you have to comment out a line, in the <em>DeepTest:Database:MysqlSetupListener#grant_privileges </em>method:
<pre style="background:#f1f0f0 none repeat scroll 0 0;color:#000000;padding-left:30px;"><span style="color:#806030;">.</span><span style="color:#806030;">.</span><span style="color:#806030;">.</span>
<span style="color:#400000;font-weight:bold;">def</span> grant_privileges<span style="color:#806030;">(</span>connection<span style="color:#806030;">)</span>
sql <span style="color:#806030;">=</span> %<span style="color:#806030;">{</span>grant all on <span style="color:#c34e00;">#{worker_database}.*</span>
to %s@<span style="color:#e60000;">'localhost'</span>;<span style="color:#806030;">}</span> % <span style="color:#806030;">[</span>
connection<span style="color:#806030;">.</span>quote<span style="color:#806030;">(</span>worker_database_config<span style="color:#806030;">[</span>:username<span style="color:#806030;">]</span><span style="color:#806030;">)</span><span style="color:#c34e00;"># ,</span>
<span style="color:#c34e00;"># connection.quote(worker_database_config[:password])  &lt;-- mysql with no password won't work</span>
<span style="color:#806030;">]</span>
connection<span style="color:#806030;">.</span>execute sql
<span style="color:#400000;font-weight:bold;">end</span>
<span style="color:#806030;">.</span><span style="color:#806030;">.</span><span style="color:#806030;">.</span>
</pre>
Another tip (the &#8220;half&#8221; in the blog post title):
Don&#8217;t forget to edit the &#8220;pattern&#8221; option in your DeepTest rake task, to be able to grab all the testcases you want.
In my case, I want to skip a whole folder containing selenium tests, so I have to write my Deep Test rake file this way:
(in <em>/lib/tasks/test.rake</em>)
<pre style="background:#f1f0f0 none repeat scroll 0 0;color:#000000;padding-left:30px;"><span style="color:#800000;font-weight:bold;">require</span> <span style="color:#e60000;">"deep_test/rake_tasks"</span>
<span style="color:#806030;">.</span><span style="color:#806030;">.</span><span style="color:#806030;">.</span>

DeepTest::TestTask<span style="color:#806030;">.</span><span style="color:#400000;font-weight:bold;">new</span> <span style="color:#e60000;">"deep"</span> <span style="color:#400000;font-weight:bold;">do</span> |t|
t<span style="color:#806030;">.</span>number_of_workers <span style="color:#806030;">=</span> <span style="color:#c00000;">2</span>
t<span style="color:#806030;">.</span>pattern <span style="color:#806030;">=</span> <span style="color:#e60000;">"test/{unit,functional,integration}/**/*_test.rb"</span>
t<span style="color:#806030;">.</span>libs &lt;&lt; <span style="color:#e60000;">"test"</span>
t<span style="color:#806030;">.</span>worker_listener <span style="color:#806030;">=</span> <span style="color:#e60000;">"DeepTest::Database::MysqlSetupListener"</span>
<span style="color:#400000;font-weight:bold;">end</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThinkCode.TV goes live!]]></title>
    <link href="http://xplayer.github.com/blog/2009/11/10/thinkcode-tv-goes-live/"/>
    <updated>2009-11-10T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2009/11/10/thinkcode-tv-goes-live</id>
    <content type="html"><![CDATA[An advertisement for my friend and mentor Piergiuliano Bossi: his long-waited <a href="http://it.thinkcode.tv/">ThinkCode.TV</a> goes live!

<strong>ThinkCode.TV </strong>is a website specializes in the delivery of high quality commercial screencasts about software development, at a really cheap prices.

The first 5 videos are now online (the actual language is italian, but english content is planned for the following months):
<ul>
	<li>The first two lessions on <strong>Python</strong>, by Marco Beri</li>
	<li>A screencast on <strong>MacRuby</strong>, by Renzo Borgatti</li>
	<li>The first two lessions on <strong>TDD</strong>, by Piergiuliano Bossi.</li>
</ul>
Selling all these high-quality screencasts at about <strong>5 euro each </strong>makes them *really* appetible.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Think different about mock objects!]]></title>
    <link href="http://xplayer.github.com/blog/2009/11/04/think-different-about-mock-objects/"/>
    <updated>2009-11-04T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2009/11/04/think-different-about-mock-objects</id>
    <content type="html"><![CDATA[<div>Recently, after the post on mock objects by Uncle Bob (<a href="http://blog.objectmentor.com/articles/2009/10/28/manual-mocking-resisting-the-invasion-of-dots-and-parentheses" target="_blank">&#8220;Manual Mocking: Resisting the Invasion of Dots and Parentheses&#8221;</a>), a rather long discussion thread grown in the extreme programming italian newsgroup (starting <a href="http://it.groups.yahoo.com/group/extremeprogramming-it/message/7224" target="_blank">here</a>, but careful, it&#8217;s in italian, sorry!).</div>
<div>This led me to think more deeply about my experience with mock objects, and I&#8217;d like to share my point of view here, as it&#8217;s quite different (or so it seems to me) from the common opinions on this important topic.</div>
<p>
<div>I&#8217;ve always followed the so-called (as Giuliano would say, isn&#8217;t it <a href="http://thinkingbox.wordpress.com/" target="_blank">Giuliano</a>? :-) &#8220;English School&#8221; of mock objects, the one coming from the pioneering works of <a href="http://www.planningcards.com/iterex/blog.html" target="_blank">Tim Mackinnon</a>,<a href="http://www.m3p.co.uk/blog/" target="_blank"> Steve Freeman</a> and <a href="http://www.natpryce.com/" target="_blank">Nat Pryce</a>, the real fathers of mock objects.</div>
<p>
<div>And I&#8217;ve always carefully followed their advice, first through their *epic* paper  <strong>&#8220;Mock Roles, not Objects&#8221;</strong> (<a href="http://www.jmock.org/oopsla2004.pdf" target="_blank">http://www.jmock.org/oopsla2004.pdf</a>) - IMHO the best paper on mock objects and on object oriented programming with mocks - then through their terrific posts on the blog <a href="http://www.mockobjects.com/" target="_blank">www.mockobjects.com</a>, and finally, through their first (and brand new) book, <a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627" target="_blank">&#8220;Growing Object-Oriented Software, Guided by Tests&#8221;</a>.</div>
<p>
<div>One thing I learn is that <strong>mock objects are a design tool</strong>, while many people see it only as a technique for speeding up unit tests.</div>
<div>And in this context mock objects are a key tool to support your TDD process, especially in test-driving your domain model, where you follow a process similar to traditional top-down development, in which you start from the highest level of abstraction and then proceed, layer by layer, to reach the core of the domain and then move again towards the boundary of the system, towards the &#8220;services&#8221; (you can find many similarities in <a href="http://alistair.cockburn.us/Hexagonal+architecture" target="_blank">Cockburn&#8217;s approach to Hexagonal Architecture</a>).</div>
<p>
<div>Then, when you reach the domain boundary, you should stop using mocks.</div>
<div>Mock objects are useful to TDDing the thin adapter layers to your services (that is, third-party libraries or external components (e.g. a database, a JMS queue, &#8230;). But then, the actual adapters will be tested with integration testing.</div>
<p>
<div>Why?</div>
<p style="padding-left:30px;">Because you should use mock objects as far as you can apply TDD, whereas you can design and *discover* interfaces (and roles), and assign responsibility. On the other hand, in front of a third-party library you cannot follow this process, since the code is not under your control, and you cannot modify it.</p>
<p>
<div style="padding-left:30px;">Because if you use mock objects with third-party libraries (two concrete examples taken from our recent projects: isolating our tests from the database in a Rails app, or in a java app using Hibernate ORM), you&#8217;ll write tests that *guess* the library behaviour, and your guesses may be far away from the actual behaviour.</div>
<div style="padding-left:30px;">Raise your hands if you never burnt your fingers with this kind of test with mocks, where maybe you *thought* you had a save() method to return an A object while in fact it returned B object! :)</div>
<p>
<div style="padding-left:30px;">And finally, because this kind of tests with mocks end up to be long, unreadable and fragile (an &#8220;invasion of dots and parentheses&#8221; reported by Uncle Bob in his post), full of mocks and mock expectations. And, hey, you cannot refactor them, since you don&#8217;t own the third-party code!</div>
<BR>
To verify the correct integration with libraries or external components, which are out of you domain, as well as with integration tests, you may use <a href="http://xunitpatterns.com/Fake%20Object.html" target="_blank">fake</a>s or <a href="http://xunitpatterns.com/Test%20Stub.html" target="_blank">stub</a>s (and, by the way, the example in the Uncle Bob&#8217;s post is actually a stub, not a &#8220;hand-rolled mock&#8221;).
<p>
<div>So, I&#8217;ll repeat myself, following this &#8220;mocks as a design tool&#8221; approach, you&#8217;ll <a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html" target="_blank">mock only types you own</a>.</div>
<p>
<div>Some useful references to study this topic in depth (you&#8217;ll be OK even if you read just the first 2-3 links :-)</div>
<div>
<ul>
	<li><a href="http://www.jmock.org/oopsla2004.pdf" target="_blank">http://www.jmock.org/oopsla2004.pdf</a> (I&#8217;m quoting again this paper, because it&#8217;s a *really* good starting point to understand this approch to mock objects)</li>
	<li><a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html" target="_blank">http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html</a> (if you like to deepen the &#8220;Don&#8217;t mock third-party libraries&#8221; and &#8220;Don&#8217;t mock value objects&#8221; topics)</li>
	<li><a href="http://www.mockobjects.com/2006/10/tell-dont-ask-and-mock-objects.html" target="_blank">http://www.mockobjects.com/2006/10/tell-dont-ask-and-mock-objects.html</a></li>
	<li><a href="http://www.mockobjects.com/2006/10/jmock-listening-to-opinionated.html" target="_blank">http://www.mockobjects.com/2006/10/jmock-listening-to-opinionated.html</a></li>
	<li><a href="http://www.mockobjects.com/2006/09/like-fire-drill.html" target="_blank">http://www.mockobjects.com/2006/09/like-fire-drill.html</a></li>
	<li><a href="http://www.mockobjects.com/2007/04/test-smell-bloated-constructor.html" target="_blank">http://www.mockobjects.com/2007/04/test-smell-bloated-constructor.html</a></li>
	<li><a href="http://www.mockobjects.com/2007/04/test-smell-i-need-to-mock-object-i-cant.html" target="_blank">http://www.mockobjects.com/2007/04/test-smell-i-need-to-mock-object-i-cant.html</a></li>
	<li><a href="http://www.mockobjects.com/files/evolving_an_edsl.ooplsa2006.pdf" target="_blank">http://www.mockobjects.com/files/evolving_an_edsl.ooplsa2006.pdf</a> (yet another paper, very good)</li>
	<li> and if you want to know more about the history of mock objects: <a href="http://www.mockobjects.com/2009/09/brief-history-of-mock-objects.html" target="_blank">http://www.mockobjects.com/2009/09/brief-history-of-mock-objects.html</a></li>
</ul>
I hope I give you some useful feedback on this topic!

</div>
<div>And, by the way, feedbacks are warmly welcome!</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: how to spot slow tests in your test suite]]></title>
    <link href="http://xplayer.github.com/blog/2009/10/02/ruby-how-to-spot-slow-tests-in-your-test-suite/"/>
    <updated>2009-10-02T00:00:00+02:00</updated>
    <id>http://xplayer.github.com/blog/2009/10/02/ruby-how-to-spot-slow-tests-in-your-test-suite</id>
    <content type="html"><![CDATA[This is actually my first post in english and also my first post on Ruby/Rails stuff. Twice as hard!

Anyway, we&#8217;re working on a Rails project, and we&#8217;re experiencing the classical debate in all Rails project (at least the ones with tests!): why our test suite is so damn slow?!
Ok, we know that ActiveRecord is one of the key components in Rails and is at the root of its philosophy of web development. And along with ActiveRecord comes the strong tight between the model and the database. So each test, even the unit tests, will touch the database (ok, technically speaking they cannot be defined unit-tests, I know. Sorry Michael Feathers for <a title="What is a unit test" href="http://www.artima.com/weblogs/viewpost.jsp?thread=126923">betraying your definition</a>).
The very first consequence of this approach is that as your test suite grows with your project, it will become slower and slower.

Let&#8217;s take our current project. This is our actual test suite composition:
<ul>
	<li> Unit: 317 tests, 803 assertions</li>
	<li> Functional: 245 tests, 686 assertions</li>
	<li> Integration: 50 tests, 218 assertions</li>
</ul>
So we have<strong> 612 test methods</strong>, for a resulting number of <strong>1707 assertions</strong>.
As a side note, our code-to-test ratio is 1:2.3, that is, for each line of production code we have 2.3 lines of tests.
The suite takes about <strong>115 seconds to execute</strong> (on my MacBook Pro Core 2 Duo).

So, what can we do to speed up our tests and have a more &#8220;feedback-friendly&#8221; test suite?
The first step toward the solution of this issue is to have some metrics to reflect on, and so I developed this little ruby module to collect test duration times.
This is how you can use it too:

First, create a file called <strong>&#8220;test_time_tracking.rb&#8221;</strong> in the test folder of your Rails project. This should be its content:
<pre style='color:#000020;background:#f6f8ff;'><span style='color:#200080;font-weight:bold;'>module</span> TestTimeTracking
    <span style='color:#200080;font-weight:bold;'>class</span> ActiveSupport::TestCase
      <span style='color:#200080;font-weight:bold;'>def</span> self<span style='color:#308080;'>.</span>should_track_timing?
        <span style='color:#200080;font-weight:bold;'>not</span><span style='color:#308080;'>(</span>ENV<span style='color:#308080;'>[</span><span style='color:#1060b6;'>"tracking"</span><span style='color:#308080;'>]</span><span style='color:#308080;'>.</span><span style='color:#200080;font-weight:bold;'>nil</span>?<span style='color:#308080;'>)</span>
      <span style='color:#200080;font-weight:bold;'>end</span>

      setup :mark_test_start_time <span style='color:#200080;font-weight:bold;'>if</span> should_track_timing?
      teardown :record_test_duration <span style='color:#200080;font-weight:bold;'>if</span> should_track_timing?

      <span style='color:#200080;font-weight:bold;'>def</span> mark_test_start_time
        @start_time <span style='color:#308080;'>=</span> Time<span style='color:#308080;'>.</span>now
      <span style='color:#200080;font-weight:bold;'>end</span>

      <span style='color:#200080;font-weight:bold;'>def</span> record_test_duration
        File<span style='color:#308080;'>.</span><span style='color:#400000;'>open</span><span style='color:#308080;'>(</span><span style='color:#1060b6;'>"/tmp/test_metrics.csv"</span>, <span style='color:#1060b6;'>"a"</span><span style='color:#308080;'>)</span> <span style='color:#200080;font-weight:bold;'>do</span> |file|
          file<span style='color:#308080;'>.</span><span style='color:#400000;'>puts</span> <span style='color:#1060b6;'>"#{name().gsub(/,/, '_')},#{Time.now - @start_time}"</span>
        <span style='color:#200080;font-weight:bold;'>end</span>
      <span style='color:#200080;font-weight:bold;'>end</span>

    <span style='color:#200080;font-weight:bold;'>end</span>
<span style='color:#200080;font-weight:bold;'>end</span>
</pre>
Then, edit your <strong>&#8220;test_helper.rb&#8221;</strong> (again, under the test folder), to require and include the previous module.
E.g.

*test_helper.rb*
<pre style='color:#000020;background:#f6f8ff;'>ENV<span style='color:#308080;'>[</span><span style='color:#1060b6;'>"RAILS_ENV"</span><span style='color:#308080;'>]</span> <span style='color:#308080;'>=</span> <span style='color:#1060b6;'>"test"</span>
  <span style='color:#400000;'>require</span> File<span style='color:#308080;'>.</span>expand_path<span style='color:#308080;'>(</span>File<span style='color:#308080;'>.</span>dirname<span style='color:#308080;'>(</span>__FILE__<span style='color:#308080;'>)</span> <span style='color:#308080;'>+</span> <span style='color:#1060b6;'>"/../config/environment"</span><span style='color:#308080;'>)</span>
  <span style='color:#400000;'>require</span> <span style='color:#1060b6;'>"test_time_tracking"</span>

  <span style='color:#200080;font-weight:bold;'>class</span> ActiveSupport::TestCase
    include TestTimeTracking
    <span style='color:#308080;'>.</span><span style='color:#308080;'>.</span><span style='color:#308080;'>.</span>
</pre>
then, all you have to do is executing your rake task with the &#8220;tracking&#8221; option set, e.g.
<code>tracking=on rake</code>

At the end of the test suite execution you&#8217;ll find a CSV file (test_metrics.csv) in your /tmp folder.
This file contains a line for each test method executed, along with its duration in seconds.
I use to upload this file in google docs, and then apply a formula to sort out the methods from the slowest to the fastest.
A good formula is the following:
<code>=Sort(A2:B612, B2:B612, FALSE)</code>

The main limitation in the current implementation of this module is that every time the suite is executed with rake, the new time metrics collected are appended at the end of the previous file (if it exists), so each time you should remember to move the file to a different location. I&#8217;m working on this issue, so I&#8217;m expecting to find a better solution. Stay tuned!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Come fare integration test su un plugin per Jira 3.13.4]]></title>
    <link href="http://xplayer.github.com/blog/2009/07/08/come-fare-integration-test-su-un-plugin-per-jira-3-13-4/"/>
    <updated>2009-07-08T00:00:00+02:00</updated>
    <id>http://xplayer.github.com/blog/2009/07/08/come-fare-integration-test-su-un-plugin-per-jira-3-13-4</id>
    <content type="html"><![CDATA[Quando si tratta di voler scrivere test di integrazione per il vostro meraviglioso plugin per Jira 3.13.4 (l&#8217;ultima versione di Jira, in attesa che la 4.0 esca dalla beta), ci si imbatte in una serie di problemi.
Dopo qualche indagine, sono riuscito a risolverli tutti, e mi accingo a condividere la soluzione adottata, nella speranza che possa servire a qualcun altro (anche a me stesso tra qualche mese&#8230;).

Premetto che stiamo sviluppato il plugin usando maven2, che per questo genere di cose è davvero molto comodo.
Se avete qualche dubbio, ecco due riferimenti:
<ul>
	<li><a title="How to Build an Atlassian Plugin" href="http://confluence.atlassian.com/display/DEVNET/How+to+Build+an+Atlassian+Plugin">http://confluence.atlassian.com/display/DEVNET/How+to+Build+an+Atlassian+Plugin</a></li>
	<li><a title="Testing your plugin" href="http://xplayer.github.com//confluence.atlassian.com/display/DEVNET/Testing+your+plugin">http://confluence.atlassian.com/display/DEVNET/Testing+your+plugin</a></li>
</ul>
Il pom.xml generato da maven usando l&#8217;archetipo per plugin di Jira contiene una sezione &#8220;properties&#8221; che, all&#8217;inizio, si presenta così:
<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;">&lt;properties&gt;
&lt;atlassian.plugin.key&gt;
com.sourcesense.jira.plugin.MyWonderfulPluginToSaveTheWorld
&lt;/atlassian.plugin.key&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;!&#8211; JIRA version &#8211;&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;atlassian.product.version&gt;3.13&lt;/atlassian.product.version&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;!&#8211; JIRA functional test library version &#8211;&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;atlassian.product.test-lib.version&gt;3.13&lt;/atlassian.product.test-lib.version&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;!&#8211; JIRA data version &#8211;&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> &lt;atlassian.product.data.version&gt;3.13&lt;/atlassian.product.data.version&gt;</span>

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;">&lt;/properties&gt;</span>

Qui trovate una <a href="http://confluence.atlassian.com/display/DEVNET/Testing+your+plugin#Testingyourplugin-SystemProperties">descrizione di queste properties</a>, assieme ai loro valori di default.

Ecco un estratto:
<p style="padding-left:20px;"><em><strong>&#8220;atlassian.product.version&#8221; </strong>- version of the Atlassian product to compile and test against.</em></p>
<p style="padding-left:20px;"><em><strong>&#8220;atlassian.product.data.version&#8221;</strong> - version of the test resource bundle that contains the basic Atlassian product configuration data for the integration test environment. These versions mimic the actual Atlassian product versions. However we might only modify and release the relevant projects for the reasons of non-backwards compatibility of the new versions of Atlassian products. Therefore not every version of Atlassian products will have a corresponding version of the resource bundle.</em></p>
La property <strong>&#8220;atlassian.product.test-lib.version&#8221;</strong> non è documentata, e per capire il suo significato dovete chiedere a Google, che vi rispondera&#8217; con <a href="http://www.customware.net/repository/display/ATLASSIAN/Integration+Testing+of+Confluence+Plugins">questa utile pagina</a>.
<p style="padding-left:20px;"><em><strong>&#8220;atlassian.product.test-lib.version&#8221;</strong> - The version of the testing library to use, as a general recommendation you should at least use version 2.0 or higher as it exposes more of the page&#8217;s content and provides quite a few extra helper classes to aid in your testing.</em></p>
Benissimo, quindi io che sto facendo un plugin per la versione 3.13.4 di Jira, sostituisco questo valore nelle tre properties del POM
<pre style="padding-left:20px;">&lt;properties&gt;
 ...
    &lt;atlassian.product.version&gt;3.13.4&lt;/atlassian.product.version&gt;
    &lt;atlassian.product.test-lib.version&gt;3.13.4&lt;/atlassian.product.test-lib.version&gt;
    &lt;atlassian.product.data.version&gt;3.13.4&lt;/atlassian.product.data.version&gt;
 &lt;/properties&gt;</pre>
Detto, fatto.
Mi manca solo di creare il mio primo test di integrazione, rigorosamente nel package che inizia con &#8220;it&#8221;.
<pre> package it.com.sourcesense.jira.plugin;

 import com.atlassian.jira.webtests.JIRAWebTest;

 public class JiraTest extends JIRAWebTest {

    public JiraTest(String name) {
      super(name);
    }

    public void setUp() {
      super.setUp();
      restoreDataWithLicense("JiraDataForTest.xml", ENTERPRISE_KEY);
   }

   public void testVerySimple() throws Exception {
      assertTextPresent("This JIRA site is for demonstration purposes only");
   }
 }</pre>
E copiare il dump esportato da Jira per avere qualche dato di test (JiraDataForTest.xml) nel folder src/test/xml/ del progetto del plugin.

A questo punto non mi resta che lanciare il seguente comando nella home della progetto
<pre style="padding-left:20px;">mvn integration-test</pre>
e aspettare con pazienza che maven scarichi quel Terabyte di jar di cui dichiara di aver bisogno.

Primo problema: la console di mvn mi dice
<pre> [INFO] [jar:jar]
 [INFO] Building jar:
        /private/tmp/HelloWorldPlugin/target/MyWonderfulPluginToSaveTheWorld-1.0-SNAPSHOT.jar
 [INFO] [antrun:run {execution: generate-integration-test-config}]
 [INFO] Executing tasks
 [touch] Creating
  /private/tmp/MyWonderfulPluginToSaveTheWorld/target/test-classes/localtest.properties
 [propertyfile] Updating property file:
  /private/tmp/MyWonderfulPluginToSaveTheWorld/target/test-classes/localtest.properties
 [INFO] Executed tasks
 [INFO] [antrun:run {execution: pre-integration-test-user-ant-tasks}]
 [INFO] Executing tasks
 [INFO] Executed tasks
 [INFO] [atlassian-test-harness:start-fisheye {execution: start-fisheye}]
 [INFO] Skipping fisheye; startService is set to false
 [INFO] [atlassian-test-harness:start-confluence {execution: start-confluence}]
 [INFO] Skipping confluence; startService is set to false
 [INFO] [atlassian-test-harness:start-jira {execution: start-jira}]
 [INFO] Output log is set to /private/tmp/MyWonderfulPluginToSaveTheWorld/target/jira/output.log</pre>
E si blocca lì.
Vado a vedere il log segnalato nell&#8217;ultima riga della console, e scopro una pletora di eccezioni:
<pre>2009-07-07 16:11:19,568 main ERROR
[com.atlassian.license.LicenseManager] Exception getting license: java.lang.RuntimeException: contactLicense was null
 at org.picocontainer.defaults.DecoratingComponentAdapter.getComponentInstance(DecoratingComponentAdapter.java:42)
 at org.picocontainer.defaults.SynchronizedComponentAdapter.getComponentInstance(SynchronizedComponentAdapter.java:35)
 ...</pre>
Indago, guardo su Google, niente.
Provo allora a sostituire 3.13.4 con 3.13.2 nelle tre properties del POM
<pre style="padding-left:20px;">&lt;properties&gt;
    ...
   &lt;atlassian.product.version&gt;3.13.2&lt;/atlassian.product.version&gt;
   &lt;atlassian.product.test-lib.version&gt;3.13.2&lt;/atlassian.product.test-lib.version&gt;
   &lt;atlassian.product.data.version&gt;3.13.2&lt;/atlassian.product.data.version&gt;
&lt;/properties&gt;</pre>
E rilancio &#8220;mvn integration-test&#8221;.
Stavolta l&#8217;errore è più chiaro: fallisce il ripristino del dump JiraDataForTest.xml nell&#8217;istanza di Jira 3.13.2 che viene avviata da maven, perchè la versione del dump è stata fatta con la 3.13.4, una versione successiva alla 3.13.2, e quindi Jira si rifiuta da caricarla. Eccheccavolo.

Vi risparmio tutte le combinazioni di numeri di versione che ho provato a mettere nel POM, senza successo, e vado dritto verso la soluzione.
Ecco il pom.xml che funziona
<pre style="padding-left:20px;">&lt;properties&gt;
 ...
 &lt;atlassian.product.version&gt;3.13.2&lt;/atlassian.product.version&gt;
 &lt;atlassian.product.test-lib.version&gt;3.13.4&lt;/atlassian.product.test-lib.version&gt;
 &lt;atlassian.product.data.version&gt;3.13.2&lt;/atlassian.product.data.version&gt;
 &lt;/properties&gt;</pre>
L&#8217;altra cosa da fare è modificare i dump di Jira che vorrete usare per i vostri test, in modo da far credere a Jira che sta importando una versione compatibile del dump.
Per fare questo dovete:

1. Aprire il dump xml di Jira che usate per i test (nel nostro caso JiraDataForTest.xml)

2. Cercare l&#8217;occorrenza di questa property
<pre style="padding-left:20px;">&lt;OSPropertyEntry id="12345"
   entityName="jira.properties"
   entityId="1"
   propertyKey="jira.version.patched"
   type="5"/&gt;</pre>
<p style="padding-left:20px;">Per essere sicuri basta che cerchiate la parola &#8220;jira.version.patched&#8221;</p>
3. Prendere nota dell&#8217;id di questa propery (es 12345) e cercare l&#8217;occorrenza di una OSPropertyString con lo stesso id
<pre style="padding-left:20px;">&lt;OSPropertyString id="12345" value="354"/&gt;</pre>
<p style="padding-left:20px;">Ecco, quel valore (354) rappresenta la build version di Jira, che per la 3.13.4 è proprio 354.</p>
4. Sostituire il valore 354 con 335, che è la build versione di Jira 3.13.2 e salvare l&#8217;xml

5. Rilanciare il test.

Tutto dovrebbe filare liscio ora&#8230;
<pre> $ mvn integration-test
 ...
 ...
 [INFO] [jar:jar]
 [INFO] Building jar:
    /Users/pietrodibello/Documents/workspace/MyWonderfulProjectToSaveTheWorld/MyWonderfulPluginToSaveTheWorld/
    target/MyWonderfulPluginToSaveTheWorld-1.0-SNAPSHOT.jar
 [INFO] [antrun:run {execution: generate-integration-test-config}]
 [INFO] Executing tasks
 [propertyfile] Updating property file:
   /Users/pietrodibello/Documents/workspace/MyWonderfulProjectToSaveTheWorld/MyWonderfulPluginToSaveTheWorld/
   target/test-classes/localtest.properties
 [INFO] Executed tasks
 [INFO] [antrun:run {execution: pre-integration-test-user-ant-tasks}]
 [INFO] Executing tasks
 [INFO] Executed tasks
 [INFO] [atlassian-test-harness:start-fisheye {execution: start-fisheye}]
 [INFO] Skipping fisheye; startService is set to false
 [INFO] [atlassian-test-harness:start-confluence {execution: start-confluence}]
 [INFO] Skipping confluence; startService is set to false
 [INFO] [atlassian-test-harness:start-jira {execution: start-jira}]
 [INFO] Output log is set to
   /Users/pietrodibello/Documents/workspace/MyWonderfulProjectToSaveTheWorld/MyWonderfulPluginToSaveTheWorld/target/jira/output.log
 [INFO] Finished with jira goal
 [INFO] [atlassian-test-harness:start-bamboo {execution: start-bamboo}]
 [INFO] Skipping bamboo; startService is set to false
 [INFO] [surefire:test {execution: acceptance_tests}]
 [INFO] Surefire report directory:
   /Users/pietrodibello/Documents/workspace/MyWonderfulProjectToSaveTheWorld/MyWonderfulPluginToSaveTheWorld/target/surefire-reports

 -------------------------------------------------------
 T E S T S
 -------------------------------------------------------
 Running it.com.sourcesense.jira.plugin.JiraTest
 .
 . Started it.com.sourcesense.jira.plugin.JiraTest.test. Wed Jul 08 14:30:44 CEST 2009
 going to page secure/admin/XmlRestore!default.jspa
 Asserting text present: Your project has been successfully imported
 Asserting text present: This JIRA site is for demonstration purposes only
 .
 . Finished it.com.sourcesense.jira.plugin.JiraTest.test. Wed Jul 08 14:30:54 CEST 2009
 . The test ran in 10.542 seconds
 . The test suite has been running for 10.536 seconds
 . Max Mem : 66650112 Total Mem : 2727936 Free Mem : 268968
 . ______________________________
 Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.045 sec

 Results :

 Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

 [INFO] ------------------------------------------------------------------------
 [INFO] BUILD SUCCESSFUL
 [INFO] ------------------------------------------------------------------------
 [INFO] Total time: 44 seconds
 [INFO] Finished at: Wed Jul 08 14:30:55 CEST 2009
 [INFO] Final Memory: 32M/254M
 [INFO] ------------------------------------------------------------------------</pre>
Evviva, barra verde!!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Come generare il report HTML dei test eseguiti con Jmeter]]></title>
    <link href="http://xplayer.github.com/blog/2009/07/06/come-generare-il-report-html-dei-test-eseguiti-con-jmeter/"/>
    <updated>2009-07-06T00:00:00+02:00</updated>
    <id>http://xplayer.github.com/blog/2009/07/06/come-generare-il-report-html-dei-test-eseguiti-con-jmeter</id>
    <content type="html"><![CDATA[<strong>Problema</strong>: <em>&#8220;Ho problemi con il report html dei test jmeter generato dalla trasformazione XSL indicata dalla documentazione di Jmeter (versione 2.3.4). Infatti nel report html si hanno due comportamenti anomali:</em>
<ul>
	<li><em>la prima riga è sempre raddoppiata, ovvero presente due volte (e vabbè, passi)</em></li>
	<li><em>le colonne che indicano i tempi massimi e minimi non sono valorizzate (NaN)&#8221;</em></li>
</ul>
<strong>Soluzione</strong>: <em>&#8220;Il problema è nella versione di Xalan inclusa di default nel JRE 1.5 e 1.6 di java. Si deve usare Xalan-J 2.4.1&#8221;</em>

<strong>Descrizione più dettagliata</strong>:

Tutto è nato con dei test di carico e performance che stiamo eseguendo in questo periodo.
Jmeter, di cui usiamo la versione 2.3.4, esporta il report del test plan in formato XML (o CSV se specificato). Per convertirlo in un HTML più comodamente fruibile si deve effettuare una trasformazione XSL, e per fortuna Jmeter mette a disposizione degli stylesheet apposta per questo (si trovano nel folder /extras dell&#8217;installazione di Jmeter).

Detto, fatto. Il comando che eseguo dovrebbe essere (ad esempio)
<pre style="padding-left:30px;">java org.apache.xalan.xslt.Process
  -IN jmeterResults.xml
  -XSL ~/work/jakarta-jmeter-2.3.4/extras/jmeter-results-report_21.xsl
  -OUT jmeterResults.html</pre>

Purtroppo questa trasformazione non funziona, o meglio, produce un HTML incompleto (vedi sezione &#8220;Problema&#8221;).

Dopo diversi tentativi, ho scoperto la soluzione, grazie ad un commento a <a href="http://jlorenzen.blogspot.com/2008/03/automated-performance-tests-using.html">questo post</a>: usando la <a href="http://mirrors.ibiblio.org/pub/mirrors/maven2/xalan/xalan/2.4.1/">versione 2.4.1 di Xalan-J</a> l&#8217;HTML prodotto è completo.

Per la cronaca, per lanciare la trasformazione XSL a linea di comando specificando una propria versione di Xalan, basta fare così
<pre style="padding-left:30px;">java
<strong>  -cp xalan-2.4.1.jar</strong> org.apache.xalan.xslt.Process
  -IN log.jtl
  -XSL ../extras/jmeter-results-report_21.xsl
  -OUT foo.html</pre>
<span style="font-family:Georgia, 'Times New Roman', 'Bitstream Charter', Times, 0;font-size:small;"><span style="line-height:19px;white-space:normal;">
</span></span>
<span style="font-family:Georgia, 'Times New Roman', 'Bitstream Charter', Times, 0;line-height:19px;white-space:normal;font-size:13px;">E in ant (cosa che interessava me in particolare, perchè lanciavamo jmeter da ant)</span>
<pre style="padding-left:30px;">&lt;xslt
  in="${scenario.target.path}/scenario-result.xml"
  out="${scenario.target.path}/AggregateReport.html"
  style="${jmeter.home}/extras/jmeter-results-report_21.xsl"
<strong>  classpath="${basedir}/../xalan-2.4.1.jar"</strong> /&gt;</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sul coaching...]]></title>
    <link href="http://xplayer.github.com/blog/2009/03/23/sul-coaching/"/>
    <updated>2009-03-23T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2009/03/23/sul-coaching</id>
    <content type="html"><![CDATA[<p>Caspita, ne è passato di tempo dal mio ultimo post, e tante cose sono cambiate nel frattempo!<br />
La cosa più importante che mi è capitata è che da oramai un anno ho felicemente cambiato lavoro, e grazie a <a href="http://www.sourcesense.com">Sourcesense</a> ho avuto la possibilità di continuare a lavorare in un team agile, dopo la passata esperienza nel team XPlayers di Quinary, iniziata nel 2002.<br />
E&#8217; giusto giusto passato un anno da quando lavoro nel <a href="http://www.sourcesense.com/en/agile/">team Orione di Sourcesense</a>, e, dopo diversi progetti di sviluppo e di mentoring, ho avuto l&#8217;occasione di fare il coach di una piccola parte del team.<br />
Quest&#8217;ultima esperienza mi ha portato anche a fare una riflessione più generale sul coaching di un team agile, riflessioni che vorrei cercare di esprimere in senso più o meno compiuto qui di seguito.</p>
<p><img class="aligncenter size-medium wp-image-45" title="teamwork!" src="http://xplayer.files.wordpress.com/2009/03/504295738_ce55fc543c4.jpg?w=300" alt="teamwork!" width="300" height="199" /></p>
<p>E&#8217; vero, verissimo, come spesso si dice e si sente dire, che ogni membro del team dovrebbe avere a cuore il processo e farsi carico di ricordare a tutti (per primo a sè stesso) le pratiche, i principi e i valori alla base del team stesso, soprattutto in condizioni di pressione o difficoltà. E&#8217; quindi ragionevole dire che il team agile *maturo* è un team &#8220;senza coach&#8221;.<br />
Eppure questa conclusione non mi soddisfa, e non mi convince del tutto.<br />
Io penso che qualunque team, dal più &#8220;green&#8221; al piu&#8217; navigato ed esperto, abbia bisogno comunque di un coach. Questo perchè ci sono alcuni &#8220;ruoli&#8221; che, sebbene possano essere interpretati da molti membri del team (da tutti i membri, in un team maturo), devono avere un interprete primario &#8220;designato&#8221; dal team.</p>
<p>Faccio un esempio: ognuno di noi sa che in caso di conflitti tra membri del team, o di atti di mancanza di rispetto, dovremmo tutti intervenire per riprendere la persona che ha &#8220;alzato i toni&#8221;, ma il coach, se presente, di certo interverrà per primo.<br />
Stessa cosa se un customer o qualunque persona &#8220;esterna&#8221; al team di sviluppo cerca di &#8220;forzare&#8221; il team a lavorare in modi che contrastano con i valori o i principi alla base del team. In tal caso ognuno di noi, indistintamente, dovrebbe intervenire. Ma non si puo&#8217; intervenire tutti, &#8220;in mucchio&#8221;. Ci vuole una persona che si faccia carico della cosa e che *per prima* protegga il team da interferenze e pressioni esterne, e per me quella persona è il coach.<br />
So che magari a molti risulterà una metafora un pò lontana, ma pensiamo alle squadre sportive (per esempio di calcio). Lì esiste la figura del capitano, che spesso e volentieri non è neanche la persona più brava della squadra (ad es nel Milan(*) il capitano è Pirlo, non Kaka&#8217; o Ronaldinhio), ma che certo interverrà per prima per riprendere un proprio giocatore se si comporta scorrettamente o se non segue gli schemi, o lo difenderà se è vittima di una decisione arbitrale giudicata ingiusta. Ancora, questo non vuol dire che gli altri giocatori non interverrano ugualmente in questi casi, ma di certo il capitano interverrà per primo e tutti i giocatori lo sanno, e quindi da questo punto di vista sono più &#8220;tranquilli&#8221;.</p>
<p>Per me questo è il ruolo primario e insostituibile del coach: è quello che c&#8217;è sempre e per primo. Se poi lui non può esserci, di certo gli altri faranno in modo che la sua assenza non si senta.</p>
<p>Tutto questo lungo e verboso discorso per dire che non penso basti chiedere che &#8220;ognuno di noi si prenda cura del processo&#8221;, anche se questo sforzo è condizione assolutamente necessaria al buon funzionamento del team.</p>
<p>P.S. Ricordo che nel team Xplayers in Quinary per un certo periodo il buon <a href="http://thinkingbox.wordpress.com/">Piergiuliano Bossi</a> (a cui devo moltissimo), come esercizio a margine degli studi teorici fatti sul libro bianco di XP di Beck, ci faceva, a turno, essere coach del team, per una iterazione. Questo ci serviva per capire che ruolo avesse davvero il coach.</p>
<p>(*) Nota: non sono milanista, è solo per fare un esempio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Michael Feathers on TDD]]></title>
    <link href="http://xplayer.github.com/blog/2008/06/18/michael-feathers-on-tdd/"/>
    <updated>2008-06-18T00:00:00+02:00</updated>
    <id>http://xplayer.github.com/blog/2008/06/18/michael-feathers-on-tdd</id>
    <content type="html"><![CDATA[Una<a href="http://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html"> breve riflessione di Michael Feathers sul TDD</a>, passando per i mock objects per finire sulla necessita&#8217; di adottare pratiche che &#8220;costringano&#8221; a ragionare e riflettere sul nostro codice.

Interessante anche l&#8217;excursus sulla storia dei mock objects, nati in Connextra
<blockquote>The story I heard was that it was all started by John Nolan, the CTO of a startup named Connextra. John Nolan, gave his developers a challenge: write OO code with no getters.  Whenever possible, tell another object to do something rather than ask.  In the process of doing this, they noticed that their code became supple and easy to change.</blockquote>
La frase chiave:
<blockquote>We need practices which help us achieve continuous discipline and a continuous state of reflection.  Clean Room and TDD are two practices which, despite their radical differences, force us to think with absolute precision about what we are doing.</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Oracle Tips] Monitorare le connessioni aperte verso il db]]></title>
    <link href="http://xplayer.github.com/blog/2008/02/08/oracle-tip-monitorare-le-connessioni-aperte-verso-il-db/"/>
    <updated>2008-02-08T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2008/02/08/oracle-tip-monitorare-le-connessioni-aperte-verso-il-db</id>
    <content type="html"><![CDATA[Ogni volta che mi serve tenere d&#8217;occhio le connessioni verso un db Oracle mi ricordo vagamente della tabella <i>Vqualcosa</i>, ma il ricordo non e&#8217; mai abbastanza nitido&#8230; Pertanto mi segno qui alcune query utili, una volta per tutte!

Per contare le connessioni aperte verso il db raggruppate per macchina client
<blockquote><code>    select MACHINE, count(*) from V$SESSION group by MACHINE</code></blockquote>
Per contare solo quelle verso un certo schema
<blockquote><code>    select MACHINE, count(*) from V$SESSION where schemaname = '&lt;NOME DELLO SCHEMA&gt;' group by MACHINE</code></blockquote>
Per contare solo quelle provenienti da certi client
<code></code>
<blockquote><code>    select MACHINE, count(*) from V$SESSION where upper(machine) like '%&lt;NOME DELLA MACCHINA CLIENT&gt;%' group by MACHINE</code></blockquote>
Per contare le connessioni aperte verso il db raggruppate per utente
<code></code>
<blockquote><code>    select osuser, count(*) from V$SESSION group by osuser;</code></blockquote>
Per contare tutte le connessioni aperte (vabbe&#8217;, questa e&#8217; banale!)
<code></code>
<blockquote><code>    select count(*) from V$SESSION;</code></blockquote>
Per vedere anche lo stato della connessione
<code></code>
<blockquote><code>    select count(*), status from V$SESSION group by status;</code></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Michael Feathers on testing private methods]]></title>
    <link href="http://xplayer.github.com/blog/2008/02/08/michael-feathers-on-testing-private-methods/"/>
    <updated>2008-02-08T00:00:00+01:00</updated>
    <id>http://xplayer.github.com/blog/2008/02/08/michael-feathers-on-testing-private-methods</id>
    <content type="html"><![CDATA[Da <a href="http://www.infoq.com/news/2008/01/private-methods-tdd-design">un articolo di InfoQ,</a> la posizione di M.Feathers sul testare i metodi privati:

Michael Feathers suggested last year in <a href="http://michaelfeathers.typepad.com/michael_feathers_blog/2007/09/the-deep-synerg.html">The Deep Synergy Between Testability and Good Design</a> that TDD encourages good design and, conversely, code that is not testable should make us think twice:
<blockquote><i>When I write tests and I have the urge to test a private method, I take it as a hint. The hint tells me that my class is encapsulating so much that it has ceased to be &#8220;understandable&#8221; by tests through its public interface. I listen to the hint, and factor my design differently. Usually, I end up moving the private method (and possibly some methods around it) to a new class where it can be non-private and accessible to tests.</i></blockquote>
Condivido al 100%!

E interessante anche quello che dice dopo, nel post originale, riguardo alla relazione tra coupling, cohesion e testabilita&#8217;.
<blockquote><i>In the end, it all comes down to cohesion and coupling.  If classes are deeply coupled with their neighbors, it is hard to control them in a test or observe them independently.  If a class isn&#8217;t cohesive, it may have some logic which is not easily exercisable through its public interface.</i>

<i>It seems that reverse is true also.  Classes which are hard to instantiate and use in a test harness are more coupled than they could be, and classes with private methods that you feel the urge to test, invariably have some sort of cohesion problem: they have more than one responsibility.</i></blockquote>
]]></content>
  </entry>
  
</feed>
